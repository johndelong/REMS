//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Measurement Studio for agn934xni 2.1.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace REMS.drivers
{
    using System;
    using System.Runtime.InteropServices;


    public class agn934xni : object, System.IDisposable
    {

        private System.Runtime.InteropServices.HandleRef _handle;

        private bool _disposed = true;

        ~agn934xni() { Dispose(false); }


        /// <summary>
        /// This function creates an IVI instrument driver session, typically using the C session instrument handle.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The instrument handle that is used to create an IVI instrument driver session.
        /// </param>
        public agn934xni(System.IntPtr Instrument_Handle)
        {
            this._handle = new System.Runtime.InteropServices.HandleRef(this, Instrument_Handle);
            this._disposed = false;
        }

        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Creates a new IVI instrument driver session.
        /// 
        /// - Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.
        /// 
        /// - If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.
        /// 
        /// - If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Note:  This function creates a new session each time you invoke it. Although you can open more than one IVI session for the same resource, it is best not to do so.  You can use the same session in multiple program threads.  You can use the agn934xni_LockSession and agn934xni_UnlockSession functions to protect sections of code that require exclusive access to the resource.
        /// 
        /// Content from the IVI specifications reproduced with permission from the IVI Foundation.  
        /// The IVI Foundation and its member companies make no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. The IVI Foundation and its member companies shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material.
        /// </summary>
        /// <param name="Resource_Name">
        /// Pass the resource name of the device to initialize.
        /// 
        /// You can also pass the name of a virtual instrument or logical name that you configure with the IVI Configuration utility.  The virtual instrument identifies a specific device and specifies the initial settings for the session.  A logical Name identifies a particular virtual instrument.
        /// 
        /// Refer to the following table below for the exact grammar to use for this parameter.  Optional fields are shown in square brackets ([]).
        /// 
        /// Syntax
        /// ------------------------------------------------------
        /// TCPIP[board]::&lt;IP address&gt;::INSTR
        /// &lt;DriverSession&gt;
        /// 
        /// The following table contains example valid values for this parameter.
        /// 
        /// "Valid Value" - Description
        /// ------------------------------------------------------
        /// "TCPIP0::192.168.0.2::INSTR" - Device with IP address
        ///                                192.168.0.1
        /// "SampleInstr" - Logical name "SampleInstr"
        /// "xyz432" - Driver Session "xyz432"
        /// 
        /// Default Value:  ""
        /// </param>
        /// <param name="ID_Query">
        /// Specify whether you want the instrument driver to perform an ID Query.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Perform ID Query (Default Value)
        /// VI_FALSE (0) - Skip ID Query
        /// 
        /// When you set this parameter to VI_TRUE, the driver verifies that the instrument you initialize is a type that this driver supports.  
        /// 
        /// Circumstances can arise where it is undesirable to send an ID Query command string to the instrument.  When you set this parameter to VI_FALSE, the function initializes the instrument without performing an ID Query.
        /// </param>
        /// <param name="Reset_Device">
        /// Specify whether you want the to reset the instrument during the initialization procedure.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Reset Device 
        /// VI_FALSE (0) - Don't Reset
        /// 
        /// Default Value:
        /// VI_TRUE
        /// </param>
        public agn934xni(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Creates a new IVI instrument driver and optionally sets the initial state of the following session attributes:
        /// 
        ///     AGN934XNI_ATTR_RANGE_CHECK         
        ///     AGN934XNI_ATTR_QUERY_INSTRUMENT_STATUS  
        ///     AGN934XNI_ATTR_CACHE               
        ///     AGN934XNI_ATTR_SIMULATE            
        ///     AGN934XNI_ATTR_RECORD_COERCIONS   
        /// 
        /// - Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.
        /// 
        /// - If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.
        /// 
        /// - If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Note:  This function creates a new session each time you invoke it. Although you can open more than one IVI session for the same resource, it is best not to do so.  You can use the same session in multiple program threads.  You can use the agn934xni_LockSession and agn934xni_UnlockSession functions to protect sections of code that require exclusive access to the resource.
        /// 
        /// Content from the IVI specifications reproduced with permission from the IVI Foundation.  
        /// The IVI Foundation and its member companies make no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. The IVI Foundation and its member companies shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material.
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// Pass the resource name of the device to initialize.
        /// 
        /// You can also pass the name of a virtual instrument or logical name that you configure with the IVI Configuration utility.  The virtual instrument identifies a specific device and specifies the initial settings for the session.  A logical Name identifies a particular virtual instrument.
        /// 
        /// Refer to the following table below for the exact grammar to use for this parameter.  Optional fields are shown in square brackets ([]).
        /// 
        /// Syntax
        /// ------------------------------------------------------
        /// TCPIP[board]::&lt;IP address&gt;::INSTR
        /// &lt;DriverSession&gt;
        /// 
        /// The following table contains example valid values for this parameter.
        /// 
        /// "Valid Value" - Description
        /// ------------------------------------------------------
        /// "TCPIP0::192.168.0.2::INSTR" - Device with IP address
        ///                                192.168.0.1
        /// "SampleInstr" - Logical name "SampleInstr"
        /// "xyz432" - Driver Session "xyz432"
        /// 
        /// Default Value:  ""
        /// </param>
        /// <param name="ID_Query">
        /// Specify whether you want the instrument driver to perform an ID Query.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Perform ID Query (Default Value)
        /// VI_FALSE (0) - Skip ID Query
        /// 
        /// When you set this parameter to VI_TRUE, the driver verifies that the instrument you initialize is a type that this driver supports.  
        /// 
        /// Circumstances can arise where it is undesirable to send an ID Query command string to the instrument.  When you set this parameter to VI_FALSE, the function initializes the instrument without performing an ID Query.
        /// </param>
        /// <param name="Reset_Device">
        /// Specify whether you want the to reset the instrument during the initialization procedure.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Reset Device 
        /// VI_FALSE (0) - Don't Reset
        /// 
        /// Default Value:
        /// VI_TRUE
        /// </param>
        /// <param name="Option_String">
        /// You can use this control to set the initial value of certain attributes for the session.  The following table lists the attributes and the name you use in this parameter to identify the attribute.
        /// 
        /// Name              Attribute Defined Constant   
        /// --------------------------------------------
        /// RangeCheck        AGN934XNI_ATTR_RANGE_CHECK
        /// QueryInstrStatus  AGN934XNI_ATTR_QUERY_INSTRUMENT_STATUS   
        /// Cache             AGN934XNI_ATTR_CACHE   
        /// Simulate          AGN934XNI_ATTR_SIMULATE  
        /// RecordCoercions   AGN934XNI_ATTR_RECORD_COERCIONS
        /// 
        /// The format of this string is, "AttributeName=Value" where AttributeName is the name of the attribute and Value is the value to which the attribute will be set.  To set multiple attributes, separate their assignments with a comma.  
        /// 
        /// If you pass NULL or an empty string for this parameter, the session uses the default values for the attributes.   You can override the default values by assigning a value explicitly in a string you pass for this parameter.  You do not have to specify all of the attributes and may leave any of them out.  If you do not specify one of the attributes, its default value will be used.  
        /// 
        /// The default values for the attributes are shown below:
        /// 
        ///     Attribute Name     Default Value
        ///     ----------------   -------------
        ///     RangeCheck         VI_TRUE
        ///     QueryInstrStatus   VI_FALSE
        ///     Cache              VI_TRUE
        ///     Simulate           VI_FALSE
        ///     RecordCoercions    VI_FALSE
        ///     
        /// 
        /// The following are the valid values for ViBoolean attributes:
        /// 
        ///     True:     1, True, or VI_TRUE
        ///     False:    0, False, or VI_FALSE
        /// 
        /// 
        /// Default Value:
        ///        "Simulate=0,RangeCheck=1,QueryInstrStatus=0,Cache=1"
        /// 
        /// </param>
        public agn934xni(string Resource_Name, bool ID_Query, bool Reset_Device, string Option_String)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.InitWithOptions(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), Option_String, out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// Gets the instrument handle.
        /// </summary>
        /// <value>
        /// The value is the IntPtr that represents the handle to the instrument.
        /// </value>
        public System.IntPtr Handle
        {
            get
            {
                return this._handle.Handle;
            }
        }

        /// <summary>
        /// This function selects the measurement type.
        /// 
        /// Note:
        /// (1) Please set the Instrument Mode to Measurement Type to AGN934XC_VAL_INSTRUMENT_MODE_SPECTRUM_ANALYZER when configuring the Measurement Type.
        /// </summary>
        /// <param name="Instrument_Mode">
        /// This command selects the instrument mode. 
        /// The driver uses this value to set the AGN934XNI_ATTR_INSTRUMENT_MODE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_INSTRUMENT_MODE_SPECTRUM_ANALYZER   -  Spectrum Analyzer
        /// AGN934XNI_VAL_INSTRUMENT_MODE_TRACKING_GENERATOR   -  Tracking Generator
        /// AGN934XNI_VAL_INSTRUMENT_MODE_POWERMETER   -  Powermeter
        /// AGN934XNI_VAL_INSTRUMENT_MODE_DEMODULATION  -  Demodulation
        /// AGN934XNI_VAL_INSTRUMENT_MODE_REFLECTION_MEASUREMENT  -  Reflection Measurement
        /// 
        /// Default Value: AGN934XNI_VAL_INSTRUMENT_MODE_SPECTRUM_ANALYZER
        /// </param>
        /// <param name="Measurement_Type">
        /// This function selects the specific power measurement mode. 
        /// The driver uses this value to set the AGN934XNI_ATTR_MEASUREMENT_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_MEASUREMENT_TYPE_OFF   -  Measurement Off
        /// AGN934XNI_VAL_MEASUREMENT_TYPE_CHP   -  Channel Power
        /// AGN934XNI_VAL_MEASUREMENT_TYPE_ACPR   -  Adjacent Channel Power Ratio
        /// AGN934XNI_VAL_MEASUREMENT_TYPE_OBW   -  Occupied Bandwidth
        /// AGN934XNI_VAL_MEASUREMENT_TYPE_SM   -  Spectrum Monitor
        /// AGN934XNI_VAL_MEASUREMENT_TYPE_SEM  -  Spectrum Emission Mask
        /// 
        /// Default Value: AGN934XNI_VAL_MEASUREMENT_TYPE_OFF
        /// 
        /// Note:
        /// Valid only when Instrument Mode is Spectrum Analyzer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureMeasurementType(int Instrument_Mode, int Measurement_Type)
        {
            int pInvokeResult = PInvoke.ConfigureMeasurementType(this._handle, Instrument_Mode, Measurement_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures average settings.
        /// </summary>
        /// <param name="Average_Enable">
        /// Toggles averaging off and on. Averaging combines the value of successive measurements to average out measurement variations.
        /// The driver uses this value to set the AGN934XNI_ATTR_AVERAGE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Average_Count">
        /// Specifies the number of measurements that are combined.
        /// The driver uses this value to set the AGN934XNI_ATTR_AVERAGE_COUNT attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 1   to  8192
        /// 
        /// Default Value: 100
        /// </param>
        /// <param name="Average_Type">
        /// Selects the averaging type for the measurement:
        /// The driver uses this value to set the AGN934XNI_ATTR_AVERAGE_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_AVERAGE_TYPE_LOGPOWER   -  Log Power
        /// AGN934XNI_VAL_AVERAGE_TYPE_POWER   -  Power
        /// AGN934XNI_VAL_AVERAGE_TYPE_VOLTAGE   -  Voltage
        /// 
        /// Default Value: AGN934XNI_VAL_AVERAGE_TYPE_LOGPOWER
        /// </param>
        /// <param name="Average_Duration_Enable">
        /// Toggles the averaging duration off and on.
        /// The driver uses this value to set the AGN934XNI_ATTR_AVERAGE_DURATION_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Average_Duration">
        /// Sets the duration of average process.
        /// The driver uses this value to set the AGN934XNI_ATTR_AVERAGE_DURATION attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 60
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureAverage(bool Average_Enable, int Average_Count, int Average_Type, bool Average_Duration_Enable, double Average_Duration)
        {
            int pInvokeResult = PInvoke.ConfigureAverage(this._handle, System.Convert.ToUInt16(Average_Enable), Average_Count, Average_Type, System.Convert.ToUInt16(Average_Duration_Enable), Average_Duration);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the acquisition attributes of the spectrum analyzer.
        /// </summary>
        /// <param name="Sweep_Mode_Continuous">
        /// Enables or disables continuous sweeping. The driver uses this value to set the Sweep Mode Continuous attribute. See the attribute description for more details.
        /// The driver uses this value to set the AGN934XNI_ATTR_SWEEP_MODE_CONTINUOUS attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Number_Of_Sweeps">
        /// This parameter is provided to be compatible with IVI specification, setting this parameter has no influence on the connected instrument.
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Detector_Type_Auto">
        /// Enables or Disables the auto detector. The driver uses this value to set the Detector Type Auto attribute. See the attribute description for more details.
        /// The driver uses this value to set the AGN934XNI_ATTR_DETECTOR_TYPE_AUTO attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE   - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Detector_Type">
        /// Specifies the method of capturing and processing signal data. The driver uses this value to set the Detector Type attribute. 
        /// The driver uses this value to set the AGN934XNI_ATTR_DETECTOR_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_DETECTOR_TYPE_AVERAGE   -  Average
        /// AGN934XNI_VAL_DETECTOR_TYPE_MAX_PEAK   -  Maximum Peak
        /// AGN934XNI_VAL_DETECTOR_TYPE_MIN_PEAK   -  Minimum Peak
        /// AGN934XNI_VAL_DETECTOR_TYPE_SAMPLE   -  Sample
        /// AGN934XNI_VAL_DETECTOR_TYPE_NORMAL   -  Normal
        /// 
        /// Default Value: AGN934XNI_VAL_DETECTOR_TYPE_MAX_PEAK
        /// </param>
        /// <param name="Vertical_Scale">
        /// Specifies the vertical scale. The driver uses this value to set the Vertical Scale attribute. 
        /// The driver uses this value to set the AGN934XNI_ATTR_VERTICAL_SCALE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_VERTICAL_SCALE_LINEAR   -  Linear
        /// AGN934XNI_VAL_VERTICAL_SCALE_LOGARITHMIC   -  Logarithmic
        /// 
        /// Default Value: AGN934XNI_VAL_VERTICAL_SCALE_LOGARITHMIC
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureAcquisition(bool Sweep_Mode_Continuous, int Number_Of_Sweeps, bool Detector_Type_Auto, int Detector_Type, int Vertical_Scale)
        {
            int pInvokeResult = PInvoke.ConfigureAcquisition(this._handle, System.Convert.ToUInt16(Sweep_Mode_Continuous), Number_Of_Sweeps, System.Convert.ToUInt16(Detector_Type_Auto), Detector_Type, Vertical_Scale);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the frequency range defining the center frequency and the frequency span. If the span corresponds to zero Hertz, then the spectrum analyzer operates in time-domain mode. Otherwise, the spectrum analyzer operates in frequency-domain mode,
        /// 
        /// This function modifies the Frequency Start and Frequency Stop attributes as follows:
        /// 
        /// Frequency Start = CenterFrequency - Span / 2 
        /// Frequency Stop = CenterFrequency + Span / 2
        /// </summary>
        /// <param name="Center_Frequency">
        /// Specifies the center frequency of the frequency sweep.
        /// The driver uses this value to set the AGN934XNI_ATTR_CENTER_FREQUENCY attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 3.5e9
        /// </param>
        /// <param name="Span">
        /// Specifies the frequency span of the frequency sweep. 
        /// The driver uses this value to set the AGN934XNI_ATTR_FREQUENCY_SPAN attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 7.0e9
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureFrequencyCenterSpan(double Center_Frequency, double Span)
        {
            int pInvokeResult = PInvoke.ConfigureFrequencyCenterSpan(this._handle, Center_Frequency, Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Sets the frequency span to full scale, zero span or the previous span setting.
        /// </summary>
        /// <param name="Frequency_Span_Mode">
        /// Sets the frequency span to full scale, zero span or the previous span setting.
        /// The driver uses this value to set the AGN934XNI_ATTR_FREQUENCY_SPAN_MODE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_FREQUENCY_SPAN_MODE_FULL   -  Full
        /// AGN934XNI_VAL_FREQUENCY_SPAN_MODE_ZERO   -  Zero
        /// AGN934XNI_VAL_FREQUENCY_SPAN_MODE_PREVIOUS   -  previous
        /// 
        /// Default Value: AGN934XNI_VAL_FREQUENCY_SPAN_MODE_ZERO
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureFrequencySpanMode(int Frequency_Span_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureFrequencySpanMode(this._handle, Frequency_Span_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Frequency Offset attribute of the spectrum analyzer. This function affects the setting of the spectrum analyzer's absolute frequencies, such as start, stop, center, and marker. It does not affect values such as span and delta marker, which are the difference of frequencies.
        /// </summary>
        /// <param name="Frequency_Offset">
        /// Specifies the frequency offset. 
        /// The driver uses this value to set the AGN934XNI_ATTR_FREQUENCY_OFFSET attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureFrequencyOffset(double Frequency_Offset)
        {
            int pInvokeResult = PInvoke.ConfigureFrequencyOffset(this._handle, Frequency_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the frequency range defining its start frequency and its stop frequency. If the start frequency is equal to the stop frequency, then the spectrum analyzer operates in time-domain mode. Otherwise, the spectrum analyzer operates in frequency-domain mode.
        /// </summary>
        /// <param name="Start_Frequency">
        /// Specifies the start frequency of the frequency sweep (in Hertz).
        /// The driver uses this value to set the AGN934XNI_ATTR_FREQUENCY_START attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Stop_Frequency">
        /// Specifies the stop frequency of the frequency sweep (in Hertz).
        /// The driver uses this value to set the AGN934XNI_ATTR_FREQUENCY_STOP attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 7e9
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureFrequencyStartStop(double Start_Frequency, double Stop_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureFrequencyStartStop(this._handle, Start_Frequency, Stop_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Gated Sweep State, Gate Source, Gate Delay and Gate Length for gated sweep.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_Gated_Sweep">
        /// Turn on/off gated sweep mode.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_GATED_SWEEP_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:SWEep:EGATe[:STATe] OFF|ON
        /// </param>
        /// <param name="Gate_Source">
        /// Set the gate trigger source of gate sweep.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_GATE_SOURCE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_GATE_SOURCE_EXTERNAL   -  External
        /// AGN934XNI_VAL_GATE_SOURCE_PERIODIC_TIMER   -  Periodic Timer
        /// AGN934XNI_VAL_GATE_SOURCE_RF_BURST   -  RF Burst
        /// 
        /// Default Value: AGN934XNI_VAL_GATE_SOURCE_EXTERNAL
        /// 
        /// Command:
        /// [:SENSe]:SWEep:EGATe:SOURce EXTernal|FRAMe|RFBurst
        /// </param>
        /// <param name="Gate_Delay">
        /// Set the gate delay time.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_GATE_DELAY attribute.
        /// 
        /// Units: 
        /// s
        /// 
        /// Valid Range:
        /// 1.2e-5   to  10
        /// 
        /// Default Value: 1.2e-5
        /// 
        /// Command:
        /// [:SENSe]:SWEep:EGATe:DELay &lt;time&gt;
        /// </param>
        /// <param name="Gate_Length">
        /// Set the gate length of the gated sweep.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_GATE_LENGTH attribute.
        /// 
        /// Units: 
        /// s
        /// 
        /// Valid Range:
        /// 8.4e-5   to  10
        /// 
        /// Default Value: 8.4e-5
        /// 
        /// Command:
        /// [:SENSe]:SWEep:EGATe:LENGth &lt;time&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureGatedSweep(bool Enable_Gated_Sweep, int Gate_Source, double Gate_Delay, double Gate_Length)
        {
            int pInvokeResult = PInvoke.ConfigureGatedSweep(this._handle, System.Convert.ToUInt16(Enable_Gated_Sweep), Gate_Source, Gate_Delay, Gate_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Gate View State and Gate View Sweep Time.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_Gate_View">
        /// Turn on/off gate view. The gated view can be enable when the gated sweep is turned on.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_GATE_VIEW_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:SWEep:EGATe:VIEW ON|OFF
        /// </param>
        /// <param name="Gate_View_Sweep_Time">
        /// Set the gated view sweep time.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_GATE_VIEW_SWEEP_TIME attribute.
        /// 
        /// Units: 
        /// s
        /// 
        /// Valid Range:
        /// 6e-7   to  1000
        /// 
        /// Default Value: 1e-3
        /// 
        /// Command:
        /// [:SENSe]:SWEep:EGATe:TIME &lt;time&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureGatedSweepView(bool Enable_Gate_View, double Gate_View_Sweep_Time)
        {
            int pInvokeResult = PInvoke.ConfigureGatedSweepView(this._handle, System.Convert.ToUInt16(Enable_Gate_View), Gate_View_Sweep_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Enables/Disables the Hi-sensitive function.
        /// </summary>
        /// <param name="High_Sensitive_Function_Enable">
        /// Toggles the Hi- sensitive function between on and off.
        /// The driver uses this value to set the AGN934XNI_ATTR_HIGH_SENSITIVITY_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureHighSensitivityEnable(bool High_Sensitive_Function_Enable)
        {
            int pInvokeResult = PInvoke.ConfigureHighSensitivityEnable(this._handle, System.Convert.ToUInt16(High_Sensitive_Function_Enable));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the vertical attributes of the spectrum analyzer. This corresponds to the Amplitude Units, Input Attenuation, Input Impedance, Reference Level, and Reference Level Offset attributes.
        /// </summary>
        /// <param name="Amplitude_Units">
        /// Specifies the amplitude units for input, output and display.
        /// The driver uses this value to set the AGN934XNI_ATTR_AMPLITUDE_UNITS attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_AMPLITUDE_UNITS_DBM   -  dBm
        /// AGN934XNI_VAL_AMPLITUDE_UNITS_DBMV   -  dBmV
        /// AGN934XNI_VAL_AMPLITUDE_UNITS_DBUV   -  dBuV
        /// AGN934XNI_VAL_AMPLITUDE_UNITS_VOLT   -  Volt
        /// AGN934XNI_VAL_AMPLITUDE_UNITS_WATT   -  Watt
        /// AGN934XNI_VAL_AMPLITUDE_UNITS_DBMVEMF   -  dBmVEMF
        /// AGN934XNI_VAL_AMPLITUDE_UNITS_DBUVEMF   -  dBuVEMF
        /// AGN934XNI_VAL_AMPLITUDE_UNITS_VEMF   -  VEMF
        /// 
        /// Default Value: AGN934XNI_VAL_AMPLITUDE_UNITS_DBM
        /// </param>
        /// <param name="Input_Impedance">
        /// Specifies the input impedance.
        /// The driver uses this value to set the AGN934XNI_ATTR_INPUT_IMPEDANCE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_INPUT_IMPEDANCE_50_OHM   -  50 OHM
        /// AGN934XNI_VAL_INPUT_IMPEDANCE_75_OHM   -  75 OHM
        /// 
        /// Default Value: AGN934XNI_VAL_INPUT_IMPEDANCE_50_OHM
        /// </param>
        /// <param name="Reference_Level">
        /// Specifies the amplitude value of the reference level.
        /// The driver uses this value to set the AGN934XNI_ATTR_REFERENCE_LEVEL attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Reference_Level_Offset">
        /// Specifies the offset value to the reference level.
        /// The driver uses this value to set the AGN934XNI_ATTR_REFERENCE_LEVEL_OFFSET attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Attenuation_Auto">
        /// Enables or disables auto attenuation.
        /// The driver uses this value to set the AGN934XNI_ATTR_ATTENUATION_AUTO attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Attenuation">
        /// Specifies the attenuation level.
        /// The driver uses this value to set the AGN934XNI_ATTR_ATTENUATION attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 0   to  50
        /// 
        /// Default Value: 20
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureLevel(int Amplitude_Units, double Input_Impedance, double Reference_Level, double Reference_Level_Offset, bool Attenuation_Auto, double Attenuation)
        {
            int pInvokeResult = PInvoke.ConfigureLevel(this._handle, Amplitude_Units, Input_Impedance, Reference_Level, Reference_Level_Offset, System.Convert.ToUInt16(Attenuation_Auto), Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the coupling and sweeping attributes.
        /// </summary>
        /// <param name="Resolution_Bandwidth_Auto">
        /// Enables or disables resolution bandwidth auto coupling. See the attribute description for more details.
        /// The driver uses this value to set the AGN934XNI_ATTR_RESOLUTION_BANDWIDTH_AUTO attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Resolution_Bandwidth">
        /// Specifies the measurement resolution bandwidth in Hertz. This value is ignored when ResolutionBandwidthAuto is True.
        /// The driver uses this value to set the AGN934XNI_ATTR_RESOLUTION_BANDWIDTH attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 10   to  3e6
        /// 
        /// Default Value: 1000
        /// </param>
        /// <param name="Video_Bandwidth_Auto">
        /// Enables or disables video bandwidth auto coupling. See the attribute description for more details.
        /// The driver uses this value to set the AGN934XNI_ATTR_VIDEO_BANDWIDTH_AUTO attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Video_Bandwidth">
        /// Specifies the video bandwidth of the post-detection filter in Hertz. This value is ignored when VideoBandwidthAuto is True. 
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_VIDEO_BANDWIDTH attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 1   to  3e6
        /// 
        /// Default Value: 3e6
        /// </param>
        /// <param name="Sweep_Time_Auto">
        /// Enables or disables sweep time auto coupling. See the attribute description for more details.
        /// The driver uses this value to set the AGN934XNI_ATTR_SWEEP_TIME_AUTO attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Sweep_Time">
        /// Specifies the length of time to sweep from the left edge to the right edge of the current domain. 
        /// The driver uses this value to set the AGN934XNI_ATTR_SWEEP_TIME attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 0.3285392
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureSweepCoupling(bool Resolution_Bandwidth_Auto, double Resolution_Bandwidth, bool Video_Bandwidth_Auto, double Video_Bandwidth, bool Sweep_Time_Auto, double Sweep_Time)
        {
            int pInvokeResult = PInvoke.ConfigureSweepCoupling(this._handle, System.Convert.ToUInt16(Resolution_Bandwidth_Auto), Resolution_Bandwidth, System.Convert.ToUInt16(Video_Bandwidth_Auto), Video_Bandwidth, System.Convert.ToUInt16(Sweep_Time_Auto), Sweep_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the ratio of the video bandwidth to the resolution bandwidth.
        /// </summary>
        /// <param name="Ratio_Auto">
        /// Selects auto or manual mode for video bandwidth to resolution bandwidth ratio. 
        /// The driver uses this value to set the AGN934XNI_ATTR_VIDEO_BANDWIDTH_AUTO attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Ratio">
        /// Specifies the ratio of the video bandwidth to the resolution bandwidth. 
        /// The driver uses this value to set the AGN934XNI_ATTR_VIDEO_BANDWIDTH attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 1   to  3e6
        /// 
        /// Default Value: 3e6
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureVBWRBWRatio(bool Ratio_Auto, double Ratio)
        {
            int pInvokeResult = PInvoke.ConfigureVBWRBWRatio(this._handle, System.Convert.ToUInt16(Ratio_Auto), Ratio);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Adjacent Channel Power measurement.
        /// </summary>
        /// <param name="Center_Frequency">
        /// Sets the center frequency of the main channel power.
        /// The driver uses this value to set the AGN934XNI_ATTR_ACPR_CENTER_FREQUENCY attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 3.5E9
        /// </param>
        /// <param name="Main_Intergration_Bandwidth">
        /// Specifies the range of integration used in calculating the power in the main channel.
        /// The driver uses this value to set the AGN934XNI_ATTR_ACPR_MAIN_CHANNEL_INTERGRATION_BANDWIDTH attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 300   to  25e6
        /// 
        /// Default Value: 1e6
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureACPR(double Center_Frequency, double Main_Intergration_Bandwidth)
        {
            int pInvokeResult = PInvoke.ConfigureACPR(this._handle, Center_Frequency, Main_Intergration_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the ACPR RRC filter settings.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_RRC_Filter">
        /// Turn on/off the RRC filter.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ACPR_RRC_FILTER_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:ACPRatio:RRC[:STATe] OFF|ON
        /// </param>
        /// <param name="RRC_Filter_Alpha_Value">
        /// Set the alpha value of RRC filter.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ACPR_RRC_FILTER_ALPHA_VALUE attribute.
        /// 
        /// Units:
        /// None
        /// 
        /// Valid Range:
        /// 0.01   to  1
        /// 
        /// Default Value: 0.22
        /// 
        /// Command:
        /// [:SENSe]:ACPRatio:RRC:ALPHa &lt;val&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureACPRFilter(bool Enable_RRC_Filter, double RRC_Filter_Alpha_Value)
        {
            int pInvokeResult = PInvoke.ConfigureACPRFilter(this._handle, System.Convert.ToUInt16(Enable_RRC_Filter), RRC_Filter_Alpha_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the channel power settings.
        /// </summary>
        /// <param name="Center_Frequency">
        /// Sets the center frequency of the display.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_CHP_CENTER_FREQUENCY attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 3.5e9
        /// </param>
        /// <param name="Integration_Bandwidth">
        /// Specifies the integration bandwidth to calculate the power.
        /// The driver uses this value to set the AGN934XNI_ATTR_CHP_INTEGRATION_BANDWIDTH attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 2e6
        /// </param>
        /// <param name="Channel_Span">
        /// Sets the analyzer span for the channel power measurement.
        /// Be sure the span is set between 1 and 10 times the integration bandwidth.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_CHP_CHANNEL_SPAN attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 1000   to  3.4e38
        /// 
        /// Default Value: 3e6
        /// </param>
        /// <param name="Auto_Range">
        /// Toggles the channel power auto range between on and off.
        /// The driver uses this value to set the AGN934XNI_ATTR_CHP_AUTO_RANGE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Bottom_Range">
        /// Set the bottom amplitude range of the power meter.
        /// The driver uses this value to set the AGN934XNI_ATTR_CHP_BOTTOM_RANGE attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// -140   to  Current Top Range
        /// 
        /// Default Value: -70
        /// </param>
        /// <param name="Top_Range">
        /// Set the top amplitude range of the power meter.
        /// The driver uses this value to set the AGN934XNI_ATTR_CHP_TOP_RANGE attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// Current Bottom Range  to  -10
        /// 
        /// Default Value: -10
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureCHP(double Center_Frequency, double Integration_Bandwidth, double Channel_Span, bool Auto_Range, double Bottom_Range, double Top_Range)
        {
            int pInvokeResult = PInvoke.ConfigureCHP(this._handle, Center_Frequency, Integration_Bandwidth, Channel_Span, System.Convert.ToUInt16(Auto_Range), Bottom_Range, Top_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the CHP RRC filter settings.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_CHP_Filter">
        /// Turn on/off RRC filter in Channel Power test.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_CHANNEL_POWER_RRC_FILTER_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:CHPower:RRC[:STATe] OFF|ON
        /// </param>
        /// <param name="RRC_Filter_Alpha_Value">
        /// Set the Alpha value of RRC filter in channel power test.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_CHANNEL_POWER_RRC_FILTER_ALPHA_VALUE attribute.
        /// 
        /// Units: 
        /// None
        /// 
        /// Valid Range:
        /// 0.01   to  1
        /// 
        /// Default Value: 0.22
        /// 
        /// Command:
        /// [:SENSe]:CHPower:RRC:ALPHa &lt;val&gt;
        /// </param>
        /// <param name="RRC_Filter_Bandwidth">
        /// Set the bandwidth of RRC filter in channel power test.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_CHANNEL_POWER_RRC_FILTER_BANDWIDTH attribute.
        /// 
        /// Units: 
        /// Hz
        /// 
        /// Valid Range:
        /// 100   to  1e8
        /// 
        /// Default Value: 2e6
        /// 
        /// Command:
        /// [:SENSe]:CHPower:RRC:BW &lt;value&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureCHPFilter(bool Enable_CHP_Filter, double RRC_Filter_Alpha_Value, double RRC_Filter_Bandwidth)
        {
            int pInvokeResult = PInvoke.ConfigureCHPFilter(this._handle, System.Convert.ToUInt16(Enable_CHP_Filter), RRC_Filter_Alpha_Value, RRC_Filter_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Trigger Type,  Trigger Delay State, Trigger Delay Time, RF Trigger Level and Trigger Slope for ASK/FSK demodulation analysis.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Valid only for ASK/FSK mode.
        /// </summary>
        /// <param name="Trigger_Type">
        /// Specify the trigger type used in current ASK/FSK demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_TRIGGER_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_DEMODULATION_TRIGGER_TYPE_IMMEDIATE   -  Immediate
        /// AGN934XNI_VAL_DEMODULATION_TRIGGER_TYPE_EXTERNAL   -  External
        /// AGN934XNI_VAL_DEMODULATION_TRIGGER_TYPE_RFTRIGGER   -  RF Trigger
        /// 
        /// Default Value: AGN934XNI_VAL_DEMODULATION_TRIGGER_TYPE_IMMEDIATE
        /// 
        /// Command:
        /// :TRIGger:DMA[:SEQuence]:SOURce IMMediate|EXTernal|RFTRigger
        /// </param>
        /// <param name="Enable_Trigger_Delay">
        /// Turn on/off trigger delay state.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_TRIGGER_DELAY_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Note:
        /// Valid only when TriggerType is not Immediate.
        /// 
        /// Command:
        /// :TRIGger:DMA[:SEQuence]:DELay:STATe OFF|ON
        /// </param>
        /// <param name="Trigger_Delay">
        /// Specify trigger delay time.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_TRIGGER_DELAY_TIME attribute.
        /// 
        /// Units: s
        /// 
        /// Valid Range:
        /// 0   to  200
        /// 
        /// Default Value: 6e-6
        /// 
        /// Note:
        /// Valid only when TriggerType is not Immediate and Enable Trigger Delay is VI_TRUE.
        /// 
        /// Command:
        /// :TRIGger:DMA[:SEQuence]:DELay &lt;time&gt;
        /// </param>
        /// <param name="RF_Trigger_Level">
        /// Specify RF trigger level.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_RF_TRIGGER_LEVEL attribute.
        /// 
        /// Units: dBm
        /// 
        /// Valid Range:
        /// -40   to  10
        /// 
        /// Default Value: 0
        /// 
        /// Note:
        /// Valid only when TriggerType is RF Trigger.
        /// 
        /// Command:
        /// :TRIGger:DMA[:SEQuence]:LEVel:ABSolute &lt;value&gt;
        /// </param>
        /// <param name="Trigger_Slope">
        /// Switch external trigger type between rise slope and fall slope. It's only available for external trigger.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_EXTERNAL_TRIGGER_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_DEMODULATION_EXTERNAL_TRIGGER_TYPE_POSITIVE   -  Positive
        /// AGN934XNI_VAL_DEMODULATION_EXTERNAL_TRIGGER_TYPE_NEGATIVE   -  Negative
        /// 
        /// Default Value: AGN934XNI_VAL_DEMODULATION_EXTERNAL_TRIGGER_TYPE_POSITIVE
        /// 
        /// Note:
        /// Valid only when TriggerType is External.
        /// 
        /// Command:
        /// :TRIGger:DMA[:SEQuence]:EXTernal:SLOPe POSitive|NEGative
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureDemodulationTrigger(int Trigger_Type, bool Enable_Trigger_Delay, double Trigger_Delay, double RF_Trigger_Level, int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureDemodulationTrigger(this._handle, Trigger_Type, System.Convert.ToUInt16(Enable_Trigger_Delay), Trigger_Delay, RF_Trigger_Level, Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Measurement Filter,  Reference Filter and Filter Symbols for ASK/FSK demodulation analysis.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Valid only for ASK/FSK mode.
        /// </summary>
        /// <param name="Measurement_Filter">
        /// Set the measurement filter in ASK/FSK demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_MEASUREMENT_FILTER attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_DEMODULATION_FILTER_OFF   -  Off
        /// AGN934XNI_VAL_DEMODULATION_FILTER_RNYQUIST   -  Root Nyquist
        /// AGN934XNI_VAL_DEMODULATION_FILTER_NYQUIST   -  Nyquist
        /// AGN934XNI_VAL_DEMODULATION_FILTER_GAUSSIAN   -  Gaussian
        /// 
        /// Default Value: AGN934XNI_VAL_DEMODULATION_FILTER_OFF
        /// 
        /// Command:
        /// [:SENSe]:DMA:RADio:STANdard:FILTer:MEASurement NONE|RNYQuist|NYQuist|GAUSsian
        /// </param>
        /// <param name="Reference_Filter">
        /// Specify reference filter in ASK/FSK demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_REFERENCE_FILTER attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_DEMODULATION_FILTER_OFF   -  Off
        /// AGN934XNI_VAL_DEMODULATION_FILTER_RNYQUIST   -  Root Nyquist
        /// AGN934XNI_VAL_DEMODULATION_FILTER_NYQUIST   -  Nyquist
        /// AGN934XNI_VAL_DEMODULATION_FILTER_GAUSSIAN   -  Gaussian
        /// 
        /// Default Value: AGN934XNI_VAL_DEMODULATION_FILTER_OFF
        /// 
        /// Command:
        /// [:SENSe]:DMA:RADio:STANdard:FILTer:REFerence RNYQuist|NYQuist|GAUSsian|NONE
        /// </param>
        /// <param name="Filter_Symbols">
        /// Specify ASK/FSK filter symbols
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_FILTER_SYMBOLS attribute.
        /// 
        /// Valid Range:
        /// 2   to  25
        /// 
        /// Default Value: 6
        /// 
        /// Note:
        /// Valid only when Measurement Filter is not off or Reference Filter is not off.
        /// 
        /// Command:
        /// [:SENSe]:DMA:RADio:STANdard:FILTer:SYMBol &lt;integer &gt;
        /// </param>
        /// <param name="Alpha_Bbt">
        /// Specify the filter Alpha/Bbt value.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_FILTER_ALPHA_BBT attribute.
        /// 
        /// Valid Range:
        /// 0.2   to  1
        /// 
        /// Default Value: 0.35
        /// 
        /// Note:
        /// Valid only when Measurement Filter is not off or Reference Filter is not off.
        /// 
        /// Command:
        /// [:SENSe]:DMA:RADio:STANdard:ALPHa &lt;real&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureDemodulationFilter(int Measurement_Filter, int Reference_Filter, int Filter_Symbols, double Alpha_Bbt)
        {
            int pInvokeResult = PInvoke.ConfigureDemodulationFilter(this._handle, Measurement_Filter, Reference_Filter, Filter_Symbols, Alpha_Bbt);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Scale per division, Reference Value, Reference Position, Scale Coupling State for X or Y axis.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Axis">
        /// Select X or Y axis to configure.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_DEMODULATION_AXIS_X   -  X Axis
        /// AGN934XNI_VAL_DEMODULATION_AXIS_Y   -  Y Axis
        /// 
        /// Default Value: AGN934XNI_VAL_DEMODULATION_AXIS_X
        /// </param>
        /// <param name="Enable_Scale_Coupling">
        /// Turn on/off X/Y scale coupling state.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_DEMODULATION_X_SCALE_COUPLING_ENABLE or AGN934XNI_ATTR_ASK_FSK_DEMODULATION_X_SCALE_COUPLING_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Commands:
        /// :DISPlay:AMA:VIEW:WINDow:TRACe:X[:SCALe]:COUPle OFF|ON
        /// :DISPlay:DMA:VIEW:WINDow:TRACe:X[:SCALe]:COUPle OFF|ON
        /// :DISPlay:AMA:VIEW:WINDow:TRACe:Y[:SCALe]:COUPle OFF|ON
        /// :DISPlay:DMA:VIEW:WINDow:TRACe:Y[:SCALe]:COUPle OFF|ON
        /// </param>
        /// <param name="Scale_Per_Division">
        /// Set the Scale per division of X axis. This control is only available when the Enable Scale Coupling is set to disable.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_DEMODULATION_X_SCALE_DIVISION, AGN934XNI_ATTR_ASK_FSK_DEMODULATION_X_SCALE_DIVISION, AGN934XNI_ATTR_AM_DEMODULATION_Y_SCALE_DIVISION, AGN934XNI_ATTR_FM_DEMODULATION_Y_SCALE_DIVISION, AGN934XNI_ATTR_ASK_DEMODULATION_Y_SCALE_DIVISION, AGN934XNI_ATTR_FSK_DEMODULATION_Y_SCALE_DIVISION attribute.
        /// 
        /// Units: 
        /// X-Axis:
        /// AM/FM: s
        /// ASK/FSK: None
        /// Y-Axis:
        /// AM/ASK: %
        /// FM/FSK: Hz
        /// 
        /// Valid Range:
        /// X-Axis:
        /// AM/FM: 1e-9 to 1
        /// ASK/FSK: 1 to 40
        /// Y-Axis:
        /// AM/FM: 0.1 to 100
        /// FM:1  to 100000
        /// FSK:1  to 150000
        /// 
        /// Default Value: 8.6e-4
        /// 
        /// Commands:
        /// DISPlay:AMA:VIEW:WINDow:TRACe:X[:SCALe]:PDIVision
        /// &lt;value&gt;
        /// DISPlay:DMA:VIEW:WINDow:TRACe:X[:SCALe]:PDIVision
        /// &lt;value&gt;
        /// DISPlay:AM:VIEW:WINDow:TRACe:Y[:SCALe]:PDIVision
        /// &lt;real&gt;
        /// DISPlay:FM:VIEW:WINDow:TRACe:Y[:SCALe]:PDIVision
        /// &lt;real&gt;
        /// DISPlay:ASK:VIEW:WINDow:TRACe:Y[:SCALe]:PDIVision
        /// &lt;real&gt;
        /// DISPlay:FSK:VIEW:WINDow:TRACe:Y[:SCALe]:PDIVision
        /// &lt;real&gt;
        /// </param>
        /// <param name="Reference_Value">
        /// Set the reference value of X/Y axis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_DEMODULATION_X_SCALE_REFERENCE_POSITION, AGN934XNI_ATTR_ASK_FSK_DEMODULATION_X_SCALE_REFERENCE_VALUE, AGN934XNI_ATTR_AM_DEMODULATION_Y_SCALE_REFERENCE_VALUE, AGN934XNI_ATTR_FM_DEMODULATION_Y_SCALE_REFERENCE_VALUE, AGN934XNI_ATTR_ASK_DEMODULATION_Y_SCALE_REFERENCE_VALUE or AGN934XNI_ATTR_FSK_DEMODULATION_Y_SCALE_REFERENCE_VALUE attribute.
        /// 
        /// Units: 
        /// X-Axis:
        /// AM/FM: s
        /// ASK/FSK: None
        /// Y-Axis:
        /// AM/ASK: %
        /// FM/FSK: Hz
        /// 
        /// Valid Range:
        /// X-Axis:
        /// AM/FM: -5 to 5
        /// ASK/FSK: -400 to 400
        /// Y-Axis:
        /// AM/ASK: -150 to 150
        /// FM/FSK: -1e6  to 1e6
        /// 
        /// Default Value: 0
        /// 
        /// Commands:
        /// :DISPlay:AMA:VIEW:WINDow:TRACe:X[:SCALe]:RVALue &lt; value &gt;
        /// :DISPlay:DMA:VIEW:WINDow:TRACe:X[:SCALe]:RVALue &lt; value &gt;
        /// :DISPlay:AM:VIEW:WINDow:TRACe:Y[:SCALe]:RVALue &lt;value&gt;
        /// :DISPlay:FM:VIEW:WINDow:TRACe:Y[:SCALe]:RVALue &lt;value&gt;
        /// :DISPlay:ASK:VIEW:WINDow:TRACe:Y[:SCALe]:RVALue &lt;value&gt;
        /// :DISPlay:ASK:VIEW:WINDow:TRACe:Y[:SCALe]:RVALue &lt;value&gt;
        /// </param>
        /// <param name="Reference_Position">
        /// Set the reference position of X/Y axis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_DEMODULATION_X_SCALE_REFERENCE_POSITION, AGN934XNI_ATTR_ASK_FSK_DEMODULATION_X_SCALE_REFERENCE_POSITION,  AGN934XNI_ATTR_AM_FM_DEMODULATION_Y_SCALE_REFERENCE_POSITION, AGN934XNI_ATTR_ASK_FSK_DEMODULATION_Y_SCALE_REFERENCE_POSITION attribute.
        /// 
        /// Valid Values:
        /// X-Axis:
        /// AGN934XNI_VAL_DEMODULATION_X_SCALE_REFERENCE_POSITION_LEFT   -  Left
        /// AGN934XNI_VAL_DEMODULATION_X_SCALE_REFERENCE_POSITION_CENTER   -  X Center
        /// AGN934XNI_VAL_DEMODULATION_X_SCALE_REFERENCE_POSITION_RIGHT   -  Right
        /// Y-Axis:
        /// AGN934XNI_VAL_DEMODULATION_Y_SCALE_REFERENCE_POSITION_TOP   -  Top
        /// AGN934XNI_VAL_DEMODULATION_Y_SCALE_REFERENCE_POSITION_CENTER   -  Y Center
        /// AGN934XNI_VAL_DEMODULATION_Y_SCALE_REFERENCE_POSITION_BOTTOM   -  Bottom
        /// 
        /// Default Value: AGN934XNI_VAL_DEMODULATION_X_SCALE_REFERENCE_POSITION_LEFT
        /// 
        /// Commands:
        /// :DISPlay:AMA:VIEW:WINDow:TRACe:X[:SCALe]:RPOSition LEFT|CENTer|RIGHt
        /// :DISPlay:DMA:VIEW:WINDow:TRACe:X[:SCALe]:RPOSition LEFT|CENTer|RIGHt
        /// :DISPlay:AMA:VIEW:WINDow:TRACe:Y[:SCALe]:RPOSition TOP|CENTer|BOTTom
        /// :DISPlay:DMA:VIEW:WINDow:TRACe:Y[:SCALe]:RPOSition TOP|CENTer|BOTTom
        /// </param>
        /// <param name="View_Type">
        /// Toggle the different view type of ASK/FSK demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_VIEW_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_DEMODULATION_VIEW_TYPE_WAVEFORM   -  Waveform
        /// AGN934XNI_VAL_DEMODULATION_VIEW_TYPE_SYMBOL   -  Symbol
        /// AGN934XNI_VAL_DEMODULATION_VIEW_TYPE_EYE   -  Eye
        /// AGN934XNI_VAL_DEMODULATION_VIEW_TYPE_ERROR   -  Error
        /// 
        /// Default Value: AGN934XNI_VAL_DEMODULATION_VIEW_TYPE_WAVEFORM
        /// 
        /// Note:
        /// Valid only for ASK/FSK demodulation analysis.
        /// 
        /// Commands:
        /// :DISPlay:DMA:VIEW WAVeform |SYMBol|EYE|ERRor
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureDemodulationDisplay(int Axis, bool Enable_Scale_Coupling, double Scale_Per_Division, double Reference_Value, int Reference_Position, int View_Type)
        {
            int pInvokeResult = PInvoke.ConfigureDemodulationDisplay(this._handle, Axis, System.Convert.ToUInt16(Enable_Scale_Coupling), Scale_Per_Division, Reference_Value, Reference_Position, View_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Limit State, Carrier Power Upper Limit, Depth Upper/Lower Limit, Frequency Deviation Upper/Lower Limit, Carrier Frequency Offset Upper Limit for demodulation analysis.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_Limit">
        /// Turn on/off the limit in demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_LIMIT_STATE or AGN934XNI_ATTR_ASK_FSK_LIMIT_STATE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Commands:
        /// :CALCulate:AMA:LIMit OFF|ON
        /// :CALCulate:DMA:LIMit OFF|ON
        /// </param>
        /// <param name="Carrier_Power_Upper_Limit">
        /// Set the upper limit of carrier power.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_CARRIER_POWER_UPPER_LIMIT or AGN934XNI_ATTR_ASK_FSK_CARRIER_POWER_UPPER_LIMIT attribute.
        /// 
        /// Units: dBm
        /// 
        /// Valid Range:
        /// -100   to  30
        /// 
        /// Default Value: 0
        /// 
        /// Commands:
        /// :CALCulate:AMA:LIMit:POWer:UPPer &lt;value&gt;
        /// :CALCulate:DMA:LIMit:POWer:UPPer &lt;value&gt;
        /// </param>
        /// <param name="Depth_Freq_Deviation_Up_Limit">
        /// Set the upper limit of AM/ASK depth or FM/FSK Frequency Deviation.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_DEPTH_UPPER_LIMIT, AGN934XNI_ATTR_ASK_DEPTH_UPPER_LIMIT, AGN934XNI_ATTR_FM_FREQUENCY_DEVIATION_UPPER_LIMIT or AGN934XNI_ATTR_FSK_FREQUENCY_DEVIATION_UPPER_LIMIT attribute.
        /// 
        /// Units: 
        /// AM/ASK: %
        /// FM/FSK: Hz
        /// 
        /// Valid Range:
        /// AM/ASK: 0.1   to  100
        /// FM/FSK: 1 to 500000
        /// 
        /// Default Value: 100
        /// 
        /// Commands:
        /// :CALCulate:AM:LIMit:MDEPth:UPPer &lt;value&gt;
        /// :CALCulate:ASK:LIMit:AMDepth:UPPer &lt;value&gt;
        /// :CALCulate:FM:LIMit:FDUL:UPPer &lt;freq&gt;
        /// :CALCulate:FSK:LIMit:FDUL:UPPer &lt;freq&gt;
        /// </param>
        /// <param name="Depth_Freq_Deviation_Low_Limit">
        /// Set the lower limit of AM/ASK depth or FM/FSK Frequency Deviation.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_DEPTH_LOWER_LIMIT, AGN934XNI_ATTR_ASK_DEPTH_LOWER_LIMIT, AGN934XNI_ATTR_FM_FREQUENCY_DEVIATION_LOWER_LIMIT or AGN934XNI_ATTR_FSK_FREQUENCY_DEVIATION_LOWER_LIMIT attribute.
        /// 
        /// Units: 
        /// AM/ASK: %
        /// FM/FSK: Hz
        /// 
        /// Valid Range:
        /// AM/ASK: 0.1   to  100
        /// FM/FSK: 1 to 500000
        /// 
        /// Default Value: 100
        /// 
        /// Commands:
        /// :CALCulate:AM:LIMit:MDEPth:LOWer &lt;value&gt;
        /// :CALCulate:ASK:LIMit:AMDepth:LOWer &lt;value&gt;
        /// :CALCulate:FM:LIMit:FDUL:LOWer &lt;freq&gt;
        /// :CALCulate:FSK:LIMit:FDUL:LOWer &lt;freq&gt;
        /// </param>
        /// <param name="Carrier_Frequency_Offset_Upper_">
        /// Specify carrier frequency offset upper limit of demodulation analysis.
        /// 
        /// The driver uses this value to set the ASK_FSK_CARRIER_FREQUENCY_OFFSET_UPPER_LIMIT or AGN934XNI_ATTR_FM_FSK_CARRIER_POWER_UPPER_LIMIT attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// AM/FM: -1e6 to +1e6
        /// ASK/FSK: -2e6 to 2e6
        /// 
        /// Default Value: 10000
        /// 
        /// Command:
        /// :CALCulate:AMA:LIMit:FOFFset:UPPer &lt;freq&gt;
        /// :CALCulate:DMA:LIMit:FOFFset:UPPer &lt;freq&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureDemodulationLimit(bool Enable_Limit, double Carrier_Power_Upper_Limit, double Depth_Freq_Deviation_Up_Limit, double Depth_Freq_Deviation_Low_Limit, double Carrier_Frequency_Offset_Upper_)
        {
            int pInvokeResult = PInvoke.ConfigureDemodulationLimit(this._handle, System.Convert.ToUInt16(Enable_Limit), Carrier_Power_Upper_Limit, Depth_Freq_Deviation_Up_Limit, Depth_Freq_Deviation_Low_Limit, Carrier_Frequency_Offset_Upper_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Average State, Average Count Number, Detector Type, Detector PeakHold, IF bandwidth auto state, IF Bandwidth, Equal Low Pass Filter for AM or FM demodulation.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Valid only for AM/FM mode.
        /// </summary>
        /// <param name="Enable_Average">
        /// Turn on/off average state in AM or FM demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_AVERAGE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:AMA:AVERage OFF|ON
        /// </param>
        /// <param name="Average_Count">
        /// Set average count number in AM or FM demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_AVERAGE_COUNT attribute.
        /// 
        /// Valid Range:
        /// 1   to  100
        /// 
        /// Default Value: 10
        /// 
        /// Note:
        /// Valid only when Enable Average is enabled.
        /// 
        /// Command:
        /// [:SENSe]:AMA:AVERage:COUNt &lt;integer&gt;
        /// </param>
        /// <param name="Detector_Type">
        /// Switch the detector type in demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_DETECTOR_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_DEMODULATION_DETECTOR_TYPE_POSITIVE_PEAK   -  Positive Peak
        /// AGN934XNI_VAL_DEMODULATION_DETECTOR_TYPE_NEGATIVE_PEAK   -  Negative Peak
        /// AGN934XNI_VAL_DEMODULATION_DETECTOR_TYPE_AVERAGE_PEAK   -  Average of Positive and Negative Peak
        /// AGN934XNI_VAL_DEMODULATION_DETECTOR_TYPE_RMS   -  RMS
        /// 
        /// Default Value: AGN934XNI_VAL_DEMODULATION_DETECTOR_TYPE_POSITIVE_PEAK
        /// 
        /// Command:
        /// [:SENSe]:AMA:DEMod:DETector[:FUNCtion] PPK|NPK|PNPK|RMS
        /// </param>
        /// <param name="Enable_Detector_Peak_Hold">
        /// Turn on/off Peak hold state of AM/FM detector.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_DETECTOR_PEAK_HOLD_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// Command:
        /// [:SENSe]:AMA:DEMod:DETector[:FUNCtion]:PEAKhold OFF|ON
        /// </param>
        /// <param name="Auto_IF_Bandwidth">
        /// Turn on/off the IF bandwidth auto state in AM/FM demodulation mode.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_IF_BANDWIDTH_AUTO attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:AMA:IFBWidth:AUTO OFF|ON
        /// </param>
        /// <param name="IF_Bandwidth">
        /// Sets the IF bandwidth of AM/FM demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_IF_BANDWIDTH attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// -1e100   to  78000   coerced to  60000
        /// 78000   to  108000   coerced to  96000
        /// 108000   to  180000   coerced to  120000
        /// 180000   to  270000   coerced to  240000
        /// 270000   to  390000   coerced to  300000
        /// 390000   to  540000   coerced to  480000
        /// 540000   to  780000   coerced to  600000
        /// 780000   to  1080000   coerced to  960000
        /// 1080000   to  1e100   coerced to  1200000
        /// 
        /// Default Value: 1200000
        /// 
        /// Command:
        /// [:SENSe]:AMA:IFBWidth 1.2MHz|960kHz|600kHz|480kHz|300kHz|240kHz|120kHz|96kHz|60kHz
        /// </param>
        /// <param name="Equal_Low_Pass_Filter">
        /// Set the equal low pass filter in demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_AM_FM_EQUAL_LOW_PASS_FILTER attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_EQUAL_LOW_PASS_FILTER_AUTO   -  Auto
        /// AGN934XNI_VAL_EQUAL_LOW_PASS_FILTER_OFF   -  Off
        /// AGN934XNI_VAL_EQUAL_LOW_PASS_FILTER_IFBW6   -  IFBW6
        /// AGN934XNI_VAL_EQUAL_LOW_PASS_FILTER_IFBW20   -  IFBW20
        /// AGN934XNI_VAL_EQUAL_LOW_PASS_FILTER_IFBW60   -  IFBW60
        /// AGN934XNI_VAL_EQUAL_LOW_PASS_FILTER_IFBW200   -  IFBW200
        /// AGN934XNI_VAL_EQUAL_LOW_PASS_FILTER_IFBW600   -  IFBW600
        /// AGN934XNI_VAL_EQUAL_LOW_PASS_FILTER_IFBW2000   -  IFBW2000
        /// 
        /// Default Value: AGN934XNI_VAL_EQUAL_LOW_PASS_FILTER_AUTO
        /// 
        /// Command:
        /// [:SENSe]:AMA:EQLPfilter AUTO|OFF|IFBW6|IFBW20|IFBW60|IFBW200|IFBW600|IFBW2000
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureAMFMMeasurement(bool Enable_Average, int Average_Count, int Detector_Type, bool Enable_Detector_Peak_Hold, bool Auto_IF_Bandwidth, double IF_Bandwidth, int Equal_Low_Pass_Filter)
        {
            int pInvokeResult = PInvoke.ConfigureAMFMMeasurement(this._handle, System.Convert.ToUInt16(Enable_Average), Average_Count, Detector_Type, System.Convert.ToUInt16(Enable_Detector_Peak_Hold), System.Convert.ToUInt16(Auto_IF_Bandwidth), IF_Bandwidth, Equal_Low_Pass_Filter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Average State, Average Count Number, Detector Type, Detector PeakHold, IF bandwidth auto state, IF Bandwidth, Equal Low Pass Filter for ASK or FSK demodulation.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Valid only for ASK/FSK mode.
        /// </summary>
        /// <param name="Enable_Average">
        /// Turn on/off average state in ASK or FSK demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_AVERAGE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:DMA:AVERage OFF|ON
        /// </param>
        /// <param name="Average_Count">
        /// Set average count number in ASK or FSK demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_AVERAGE_COUNT attribute.
        /// 
        /// Valid Range:
        /// 1   to  100
        /// 
        /// Default Value: 10
        /// 
        /// Note:
        /// Valid only when Enable Average is enabled.
        /// 
        /// Command:
        /// [:SENSe]:DMA:AVERage:COUNt &lt;integer&gt;
        /// </param>
        /// <param name="Symbol_Rate">
        /// Specify symbol rate for ASK/FSK demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_SYMBOL_RATE attribute.
        /// 
        /// Units: sps
        /// 
        /// Valid Range:
        /// 100   to  100000
        /// 
        /// Default Value: 1000
        /// 
        /// Command:
        /// [:SENSe]:DMA:RADio:STANdard:SRATe &lt;value&gt;
        /// </param>
        /// <param name="Measurement_Length">
        /// The driver uses this value to set the AGN934XNI_ATTR_ASK_FSK_DEMODULATION_MEASUREMENT_LENGTH attribute.
        /// 
        /// Valid Range:
        /// 20   to  1100
        /// 
        /// Default Value: 1100
        /// 
        /// Command:
        /// [:SENSe]:DMA:MEASurement:LENGth &lt;value&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureASKFSKMeasurement(bool Enable_Average, int Average_Count, double Symbol_Rate, int Measurement_Length)
        {
            int pInvokeResult = PInvoke.ConfigureASKFSKMeasurement(this._handle, System.Convert.ToUInt16(Enable_Average), Average_Count, Symbol_Rate, Measurement_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Sets the external gain.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="External_Gain">
        /// Sets the external gain.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_EXTERNAL_GAIN attribute.
        /// 
        /// Units: dB
        /// 
        /// Valid Range:
        /// 0   to  51
        /// 
        /// Default Value: 0
        /// 
        /// Command:
        /// [:SENSe]:CORRection:OFFSet[:MAGNitude] &lt;dB&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureExternalGain(double External_Gain)
        {
            int pInvokeResult = PInvoke.ConfigureExternalGain(this._handle, External_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Turn on/off preamplifier in demodulation mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_Preamplifier">
        /// Turn on/off preamplifier in demodulation mode.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_PREAMPLIFIER_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:POWer[:RF]:GAIN[:STATe] OFF|ON
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int EnableDemodulationPreamplifier(bool Enable_Preamplifier)
        {
            int pInvokeResult = PInvoke.EnableDemodulationPreamplifier(this._handle, System.Convert.ToUInt16(Enable_Preamplifier));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Switch the 4 modulaes in demodulation mode. This function will first enable the access demodulation analysis mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Demodulation_Mode">
        /// Switch the 4 modulaes in demodulation mode.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_DEMODULATION_MODE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_DEMODULATION_MODE_AM   -  AM
        /// AGN934XNI_VAL_DEMODULATION_MODE_FM   -  FM
        /// AGN934XNI_VAL_DEMODULATION_MODE_ASK   -  ASK
        /// AGN934XNI_VAL_DEMODULATION_MODE_FSK   -  FSK
        /// 
        /// Default Value: AGN934XNI_VAL_DEMODULATION_MODE_AM
        /// 
        /// Command:
        /// :INSTrument:MEASure AM|FM|ASK|FSK
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureDemodulationMode(int Demodulation_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureDemodulationMode(this._handle, Demodulation_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the carrier frequency, carrier frequency step and auto carrier frequency state of the demodulation analysis.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Auto_Carrier_Frequency">
        /// Turn on/off auto carrier frequency detection.
        /// The driver uses this value to set the AGN934XNI_ATTR_AUTO_CARRIER_FREQUENCY_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Carrier_Frequency">
        /// Sets the carrier frequency of the demodulation analysis.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_CARRIER_FREQUENCY attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 2.5e6   to  7e9
        /// 
        /// Default Value: 3.5e9
        /// 
        /// Note:
        /// Valid only when Auto Carrier Frequency is disabled.
        /// 
        /// Command:
        /// [:SENSe]:FREQuency:CARRier &lt;freq&gt;
        /// </param>
        /// <param name="Carrier_Frequency_Step">
        /// The driver uses this value to set the AGN934XNI_ATTR_CARRIER_FREQUENCY_STEP attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 1e8
        /// 
        /// Command:
        /// [:SENSe]:FREQuency:CARRier:STEP &lt;freq&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureCarrierFrequency(bool Auto_Carrier_Frequency, double Carrier_Frequency, double Carrier_Frequency_Step)
        {
            int pInvokeResult = PInvoke.ConfigureCarrierFrequency(this._handle, System.Convert.ToUInt16(Auto_Carrier_Frequency), Carrier_Frequency, Carrier_Frequency_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Restart measurement of current demodulation analysis.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Command:
        /// [:SENSe]:MEASure:RESTart
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int RestartMeasurement()
        {
            int pInvokeResult = PInvoke.RestartMeasurement(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the OBW measurement method, OBW power percentage and the dBc value.
        /// </summary>
        /// <param name="O_BWMethod">
        /// This command toggles the method of OBW measurement between percent or dBc.
        /// The driver uses this value to set the AGN934XNI_ATTR_OBW_METHOD attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_OBW_METHOD_PERCENT   -  Percent
        /// AGN934XNI_VAL_OBW_METHOD_DBC   -  dBc
        /// 
        /// Default Value: AGN934XNI_VAL_OBW_METHOD_PERCENT
        /// </param>
        /// <param name="OBW_Power_Percentage">
        /// Specifies the percentage of signal power used when determining the occupied bandwidth.
        /// The driver uses this value to set the AGN934XNI_ATTR_OBW_POWER_PERCENTAGE attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 10   to  99
        /// 
        /// Default Value: 99
        /// </param>
        /// <param name="O_BWPower_Level">
        /// Specifies the power level used to determine the emission bandwidth as the number of dB down from the highest signal point, within the occupied bandwidth span.
        /// The driver uses this value to set the AGN934XNI_ATTR_OBW_POWER_LEVEL attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 0.1   to  100
        /// 
        /// Default Value: 26
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureOBW(int O_BWMethod, double OBW_Power_Percentage, double O_BWPower_Level)
        {
            int pInvokeResult = PInvoke.ConfigureOBW(this._handle, O_BWMethod, OBW_Power_Percentage, O_BWPower_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Trigger Type, Trigger Source, Auto Trigger Level State, Trigger Level and Trigger Slope Mode for power meter mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Trigger_Type">
        /// Toggles the peak power sensor trigger type between Continuous Trigger, Single Trigger and Free Run.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRIGGER_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_POWER_METER_TRIGGER_TYPE_FREERUN   -  Free Run
        /// AGN934XNI_VAL_POWER_METER_TRIGGER_TYPE_CONTINUOUS   -  Continuous Trigger
        /// AGN934XNI_VAL_POWER_METER_TRIGGER_TYPE_SINGLE   -  Single Trigger
        /// 
        /// Default Value: AGN934XNI_VAL_POWER_METER_TRIGGER_TYPE_FREERUN
        /// 
        /// Command:
        /// :TRIGger1:SOURce:ACQN FREErun|CONTinuous|SINGle
        /// </param>
        /// <param name="Trigger_Source">
        /// Toggle the trigger source between external and internal. It's only available for continuous trigger or single trigger.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRIGGER_SOURCE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_POWER_METER_TRIGGER_SOURCE_EXTERNAL   -  External
        /// AGN934XNI_VAL_POWER_METER_TRIGGER_SOURCE_INTERNAL   -  Inernal
        /// 
        /// Default Value: AGN934XNI_VAL_POWER_METER_TRIGGER_SOURCE_INTERNAL
        /// 
        /// Command:
        /// :TRIGger1:SOURce EXTernal|INTernal
        /// </param>
        /// <param name="Auto_Trigger_Level">
        /// Turns on/off auto trigger level state of power meter measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_AUTO_TRIGGER_LEVEL_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Command:
        /// :TRIGger[:SEQuence]:LEVel:AUTO OFF|ON
        /// </param>
        /// <param name="Trigger_Level">
        /// Defines the trigger level of power sensor. It's only available for continuous trigger or single trigger. The trigger source must be internal, and auto trigger level state must be off.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRIGGER_LEVEL attribute.
        /// 
        /// Units: dBm
        /// 
        /// Valid Range:
        /// -100   to  0
        /// 
        /// Default Value: 0
        /// 
        /// Command:
        /// :TRIGger[:SEQuence]:LEVel &lt;value&gt;
        /// </param>
        /// <param name="Trigger_Slope">
        /// Toggles trigger slope mode between rise and fall.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRIGGER_SLOPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_POWER_METER_TRIGGER_SLOPE_NEGATIVE   -  Negative
        /// AGN934XNI_VAL_POWER_METER_TRIGGER_SLOPE_POSITIVE   -  Positive
        /// 
        /// Default Value: AGN934XNI_VAL_POWER_METER_TRIGGER_SLOPE_POSITIVE
        /// 
        /// Command:
        /// :TRIGger[:SEQuence]:SLOPe POSitive|NEGative
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerMeterTrigger(int Trigger_Type, int Trigger_Source, bool Auto_Trigger_Level, double Trigger_Level, int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.ConfigurePowerMeterTrigger(this._handle, Trigger_Type, Trigger_Source, System.Convert.ToUInt16(Auto_Trigger_Level), Trigger_Level, Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Trigger Delay Time, Trigger Holdoff Time and  Trigger Hysteresis Value for power meter mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Trigger_Delay_Time">
        /// Defines trigger delay time of power meter measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRIGGER_DELAY_TIME attribute.
        /// 
        /// Units: s
        /// 
        /// Valid Range:
        /// 0   to  1
        /// 
        /// Default Value: 0
        /// 
        /// Command:
        /// :TRIGger[:SEQuence]:DELay &lt;value&gt;
        /// </param>
        /// <param name="Trigger_Holdoff_Time">
        /// Defines the trigger hold off time of power meter.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRIGGER_HOLDOFF_TIME attribute.
        /// 
        /// Units: s
        /// 
        /// Valid Range:
        /// 1e-6   to  0.4
        /// 
        /// Default Value: 1e-6
        /// 
        /// Command:
        /// TRIGger[:SEQuence]:HOLDoff &lt;value&gt;
        /// </param>
        /// <param name="Trigger_Hysteresis_Value">
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRIGGER_HYSTERESIS_VALUE attribute.
        /// 
        /// Valid Range:
        /// 0   to  3
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerMeterTriggerTime(double Trigger_Delay_Time, double Trigger_Holdoff_Time, double Trigger_Hysteresis_Value)
        {
            int pInvokeResult = PInvoke.ConfigurePowerMeterTriggerTime(this._handle, Trigger_Delay_Time, Trigger_Holdoff_Time, Trigger_Hysteresis_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Limit State, Limit Upper Value, Limit Lower Value and Limit Beep State for power meter mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_Limit">
        /// Turn on/off limit state.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_LIMIT_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// :CALCulate1:LIMit:STATe OFF|ON
        /// </param>
        /// <param name="Upper_Limit">
        /// Defines the upper limit value.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_LIMIT_UPPER_VALUE attribute.
        /// 
        /// Units: dBm
        /// 
        /// Valid Range:
        /// -199.99   to  200
        /// 
        /// Default Value: 10
        /// 
        /// Command:
        /// :CALCulate1:LIMit:UPPer[:DATA] &lt;value&gt;
        /// </param>
        /// <param name="Lower_Limit">
        /// Defines the lower limit value.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_LIMIT_LOWER_VALUE attribute.
        /// 
        /// Units: dBm
        /// 
        /// Valid Range:
        /// -200   to  199.99
        /// 
        /// Default Value: -60
        /// 
        /// Command:
        /// :CALCulate1:LIMit:LOWer[:DATA] &lt;value&gt;
        /// </param>
        /// <param name="Enable_Limit_Beep">
        /// Turn on/off beep warning for limit.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_LIMIT_BEEP_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// :CALCulate:LLINe:CONTrol:BEEP ON|OFF
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerMeterLimit(bool Enable_Limit, double Upper_Limit, double Lower_Limit, bool Enable_Limit_Beep)
        {
            int pInvokeResult = PInvoke.ConfigurePowerMeterLimit(this._handle, System.Convert.ToUInt16(Enable_Limit), Upper_Limit, Lower_Limit, System.Convert.ToUInt16(Enable_Limit_Beep));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Trace X Start Time, Trace X Scale Time,  Trace Y Max Value and Trace Y Scale Value for power meter mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Trace_X_Start_Time">
        /// Defines the trace X start time of peak power sensor.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRACE_X_START_TIME attribute.
        /// 
        /// Units: s
        /// 
        /// Valid Range:
        /// 0   to  1
        /// 
        /// Default Value: 0
        /// 
        /// Command:
        /// :SENSe:TRACe:OFFSet:TIME &lt;value&gt;
        /// </param>
        /// <param name="Trace_X_Scale_Time">
        /// Defines the trace X scale time of peak power sensor.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRACE_X_SCALE_TIME attribute.
        /// 
        /// Units: s
        /// 
        /// Valid Range:
        /// 2e-8   to  0.1
        /// 
        /// Default Value: 1e-5
        /// 
        /// Command:
        /// :SENSe:TRACe:TIME &lt;value&gt;
        /// </param>
        /// <param name="Trace_Y_Max_Value">
        /// Defines the trace Y max value of peak power sensor.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRACE_Y_MAX_VALUE attribute.
        /// 
        /// Units: dBm
        /// 
        /// Valid Range:
        /// -150   to  230
        /// 
        /// Default Value: 230
        /// 
        /// Command:
        /// :SENSe:TRACe:YMAX:TIME &lt;value&gt;
        /// </param>
        /// <param name="Trace_Y_Scale_Value">
        /// Defines trace Y scale value of peak power sensor.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_TRACE_Y_SCALE_VALUE attribute.
        /// 
        /// Units: dBm
        /// 
        /// Valid Range:
        /// 1e-3   to  10
        /// 
        /// Default Value: 10
        /// 
        /// Command:
        /// :SENSe:TRACe:Y:TIME &lt;value&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerMeterPeakTrace(double Trace_X_Start_Time, double Trace_X_Scale_Time, double Trace_Y_Max_Value, double Trace_Y_Scale_Value)
        {
            int pInvokeResult = PInvoke.ConfigurePowerMeterPeakTrace(this._handle, Trace_X_Start_Time, Trace_X_Scale_Time, Trace_Y_Max_Value, Trace_Y_Scale_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Gate Start Time and Gate Length Time for power meter mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Gate_Start_Time">
        /// Specify the gate start time of peak power meter.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_GATE_START_TIME attribute.
        /// 
        /// Units: s
        /// 
        /// Valid Range:
        /// -1   to  1
        /// 
        /// Command:
        /// [:SENSe]:SWEep[1]:OFFSet:TIME &lt;value&gt;
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Gate_Length_Time">
        /// Defines the gate length time of peak power meter measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_GATE_LENGTH_TIME attribute.
        /// 
        /// Units: s
        /// 
        /// Valid Range:
        /// 0   to  1
        /// 
        /// Command:
        /// [:SENSe]:SWEep[1]:TIME &lt;value&gt;
        /// Default Value: 1e-4
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerMeterPeakGate(double Gate_Start_Time, double Gate_Length_Time)
        {
            int pInvokeResult = PInvoke.ConfigurePowerMeterPeakGate(this._handle, Gate_Start_Time, Gate_Length_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Measurement Interval Time,Video Bandwidth Type,  Video Average Count Auto State and Video Average Count for power meter mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Measurement_Interval_Time">
        /// Defines the power meter measurement interval time.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_MEASUREMENT_INTERVAL_TIME attribute.
        /// 
        /// Units: s
        /// 
        /// Valid Range:
        /// 1e-3   to  200
        /// 
        /// Default Value: 0.1
        /// 
        /// Command:
        /// [:SENSe]:MEASure:INTerval:TIME &lt;value&gt;
        /// </param>
        /// <param name="Video_Bandwidth_Type">
        /// Toggle the video bandwidth type between high, middle, low and off.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_VIDEO_BANDWIDTH_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_POWER_METER_VIDEO_BANDWIDTH_TYPE_HIGH   -  High
        /// AGN934XNI_VAL_POWER_METER_VIDEO_BANDWIDTH_TYPE_MEDIUM   -  Medium
        /// AGN934XNI_VAL_POWER_METER_VIDEO_BANDWIDTH_TYPE_LOW   -  Low
        /// AGN934XNI_VAL_POWER_METER_VIDEO_BANDWIDTH_TYPE_OFF   -  Off
        /// 
        /// Default Value: AGN934XNI_VAL_POWER_METER_VIDEO_BANDWIDTH_TYPE_OFF
        /// 
        /// Command:
        /// [:SENSe]:BANDwidth|BWIDth HIGH|MEDium|LOW|OFF
        /// </param>
        /// <param name="Auto_Video_Average_Count">
        /// Turn on/off the average count of power meter.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_AUTO_VIDEO_AVERAGE_COUNT_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:AVERage:VIDeo:COUNt:AUTO OFF|ON
        /// </param>
        /// <param name="Video_Average_Count">
        /// Defines the average count number of power meter. The trigger type must be set to continuos trigger or single trigger. The count number parameter can only be set to N-th power of 2.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_VIDEO_AVERAGE_COUNT attribute.
        /// 
        /// Valid Range:
        /// 1   to  256
        /// 
        /// Default Value: 4
        /// 
        /// Note:
        /// Valid only when Auto Video Average Count is disabled.
        /// 
        /// Command:
        /// [:SENSe]:AVERage:VIDeo:COUNt &lt;value&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerMeterAdvanced(double Measurement_Interval_Time, int Video_Bandwidth_Type, bool Auto_Video_Average_Count, int Video_Average_Count)
        {
            int pInvokeResult = PInvoke.ConfigurePowerMeterAdvanced(this._handle, Measurement_Interval_Time, Video_Bandwidth_Type, System.Convert.ToUInt16(Auto_Video_Average_Count), Video_Average_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Average State, Average Count Auto State,  Average Count Number and Average Step Detect State for power meter mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_Average">
        /// Turn on/off power meter average state.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_AVERAGE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:AVERage[:STATe] OFF|ON
        /// </param>
        /// <param name="Auto_Average_Count">
        /// Toggles the power meter average count auto state.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_AUTO_AVERAGE_COUNT_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Note:
        /// Valid only when Enable Average Count is enabled.
        /// 
        /// Command:
        /// [:SENSe]:AVERage:COUNt:AUTO OFF|ON
        /// </param>
        /// <param name="Average_Count_Number">
        /// Defines the power meter average count number.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_AVERAGE_COUNT_NUMBER attribute.
        /// 
        /// Valid Range:
        /// 1   to  1024
        /// 
        /// Default Value: 1024
        /// 
        /// Note:
        /// Valid only when Enable Average Count is enabled and Auto Average Count is disabled.
        /// 
        /// Command:
        /// [:SENSe]:AVERage:COUNt &lt;value&gt;
        /// </param>
        /// <param name="Enable_Average_Step_Detect">
        /// Turn on/off step detect state.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_AVERAGE_STEP_DETECT_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Note:
        /// Valid only when Enable Average Count is enabled.
        /// 
        /// Command:
        /// [:SENSe]:AVERage:SDETect OFF|ON
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerMeterAverage(bool Enable_Average, bool Auto_Average_Count, int Average_Count_Number, bool Enable_Average_Step_Detect)
        {
            int pInvokeResult = PInvoke.ConfigurePowerMeterAverage(this._handle, System.Convert.ToUInt16(Enable_Average), System.Convert.ToUInt16(Auto_Average_Count), Average_Count_Number, System.Convert.ToUInt16(Enable_Average_Step_Detect));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Auto Power Range State, Power Range, Center Frequency, Reference Power State, Reference, Power, Reference Power Value, Offset State and Offset Value for power meter mode.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Auto_Power_Range">
        /// Turns on/off power auto range state. N9322C will choose the power range according to current measurement power.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_AUTO_POWER_RANGE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Command:
        /// [:SENSe]:POWer:AC:RANGe:AUTO OFF|ON
        /// </param>
        /// <param name="Power_Range">
        /// Toggles the measure power range between upper and lower.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_POWER_RANGE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_POWER_METER_POWER_RANGE_UPPER   -  Upper
        /// AGN934XNI_VAL_POWER_METER_POWER_RANGE_LOWER   -  Lower
        /// 
        /// Default Value: AGN934XNI_VAL_POWER_METER_POWER_RANGE_LOWER
        /// 
        /// Note:
        /// Valid only when Auto Power Range is disabled.
        /// 
        /// Command:
        /// [:SENSe]:POWer:AC:RANGe UPPer|LOWer
        /// </param>
        /// <param name="Center_Frequency">
        /// Defines the center frequency of power meter measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_CENTER_FREQUENCY attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 1e3   to  9e10
        /// 
        /// Default Value: 5e7
        /// 
        /// Command:
        /// [:SENSe]:FREQuency[:CW] &lt;freq&gt;
        /// </param>
        /// <param name="Enable_Reference_Power">
        /// Turn on/off reference power state.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_REFERENCE_POWER_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:CORRection:CSET1:STATe OFF|ON
        /// </param>
        /// <param name="Reference_Power_Value">
        /// Defines the reference power value.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_REFERENCE_POWER_VALUE attribute.
        /// 
        /// Units: dBm
        /// 
        /// Valid Range:
        /// -200   to  200
        /// 
        /// Default Value: 0
        /// 
        /// Note:
        /// Vaoid only when EnableReferencePower is enabled.
        /// 
        /// Command:
        /// [:SENSe]:CORRection:CSET1[:INPut][:MAGNitude] &lt;value&gt;
        /// </param>
        /// <param name="Enable_Offset">
        /// Turns on/off offset state for power meter measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_OFFSET_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:CORRection:GAIN2:STATe OFF|ON
        /// </param>
        /// <param name="Offset_Value">
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_OFFSET_VALUE attribute.
        /// 
        /// Units: dB
        /// 
        /// Valid Range:
        /// -200   to  200
        /// 
        /// Default Value: 0
        /// 
        /// Note:
        /// Valid only when Enable Offset is enabled.
        /// 
        /// Command:
        /// [:SENSe]:CORRection:GAIN2[:INPut][:MAGNitude] &lt;value&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerMeter(bool Auto_Power_Range, int Power_Range, double Center_Frequency, bool Enable_Reference_Power, double Reference_Power_Value, bool Enable_Offset, double Offset_Value)
        {
            int pInvokeResult = PInvoke.ConfigurePowerMeter(this._handle, System.Convert.ToUInt16(Auto_Power_Range), Power_Range, Center_Frequency, System.Convert.ToUInt16(Enable_Reference_Power), Reference_Power_Value, System.Convert.ToUInt16(Enable_Offset), Offset_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Power Meter Sweep State.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Sweep_State">
        /// Toggles power meter sweep state between run and pause.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_SWEEP_STATE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_POWER_METER_SWEEP_STATE_RUN   -  Run
        /// AGN934XNI_VAL_POWER_METER_SWEEP_STATE_PAUSE   -  Pause
        /// 
        /// Default Value: AGN934XNI_VAL_POWER_METER_SWEEP_STATE_RUN
        /// 
        /// Command:
        /// [:SENSe]:SWEep:STATe RUN|PAUSe
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerMeterSweepState(int Sweep_State)
        {
            int pInvokeResult = PInvoke.ConfigurePowerMeterSweepState(this._handle, Sweep_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the power sensor zeroing type.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Zeroing_Type">
        /// Toggles the zeroing type between external type and internal type.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_POWER_METER_ZEROING_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_ZEROING_TYPE_EXTERNAL   -  External
        /// AGN934XNI_VAL_ZEROING_TYPE_INTERNAL   -  Internal
        /// 
        /// Default Value: AGN934XNI_VAL_ZEROING_TYPE_INTERNAL
        /// 
        /// Command:
        /// :CALibration[1]:ZERO:TYPE EXTernal|INTernal
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePowerSensorZeroingType(int Zeroing_Type)
        {
            int pInvokeResult = PInvoke.ConfigurePowerSensorZeroingType(this._handle, Zeroing_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Perform power sensor zeroing operation.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Command:
        /// :CALibration[1]:ZERO:ONCE
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int StartPowerSensorZeroing()
        {
            int pInvokeResult = PInvoke.StartPowerSensorZeroing(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Turns on/off marker continuous valley state in reflection measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_Continuous_Valley">
        /// Turns on/off marker continuous valley state in reflection measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_MARKER_CONTINUOUS_VALLEY_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// :CALCulate:MARKer[1]|2|3|4|5|6:CVALley OFF|ON
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int EnableMarkerContinuousValley(bool Enable_Continuous_Valley)
        {
            int pInvokeResult = PInvoke.EnableMarkerContinuousValley(this._handle, System.Convert.ToUInt16(Enable_Continuous_Valley));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Trace Display Type, Trace Math Type, Trace Average Number State, Trace Average Number for reflection measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Display_Type">
        /// Toggles the trace display type. Reflection measurement supports three display type, displaying current measurement result, displaying the trace data saved in memory, and display both the data saved in memory and current sweep result.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_TRACE_DISPLAY_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_TYPE_DATA   -  Current Measurement Result
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_TYPE_MEM   -  The Trace Data Saved In Memory
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_TYPE_BOTH   -  Both Memory and Current Sweep Result
        /// 
        /// Default Value: AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_DISPLAY_TYPE_DATA
        /// 
        /// Command:
        /// [:SENSe]:CAT:TRACe:DISPlay DATA|MEM|DAM
        /// </param>
        /// <param name="Math_Type">
        /// Toggles the trace math type of reflection measurement. RM7 option support three trace type, measurement trace data plus memory saved trace data, immurement trace data minus memory saved trace data, and memory saved data minus measurement trace data.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_TRACE_MATH_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_MATH_TYPE_OFF   -  Off
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_MATH_TYPE_ADD   -  Data+Mem
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_MATH_TYPE_SUB   -  Data-Mem
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_MATH_TYPE_DIV   -  Data/Mem
        /// 
        /// Default Value: AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_MATH_TYPE_OFF
        /// 
        /// Command:
        /// [:SENSe]:CAT:TRACe:MATH OFF|ADD|SUB|DIV
        /// </param>
        /// <param name="Enable_Average_Number">
        /// Turn on/off the trace average operation.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_TRACE_AVERAGE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Command:
        /// [:SENSe]:CAT:AVERage[:STATe] OFF|ON
        /// </param>
        /// <param name="Average_Number">
        /// Defines the trace average number of CAT test.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_TRACE_AVERAGE_NUMBER attribute.
        /// 
        /// Units: 
        /// none
        /// 
        /// Valid Range:
        /// 1   to  8192
        /// 
        /// Default Value: 1
        /// 
        /// Command:
        /// [:SENSe]:CAT:AVERage:COUNt &lt;value&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureReflectionMeasurementTrace(int Display_Type, int Math_Type, bool Enable_Average_Number, int Average_Number)
        {
            int pInvokeResult = PInvoke.ConfigureReflectionMeasurementTrace(this._handle, Display_Type, Math_Type, System.Convert.ToUInt16(Enable_Average_Number), Average_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Auto Scale State, Amplitude Scale Reference Level, Amplitude Scale Per Division for reflection measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Auto_Scale">
        /// Perform amplitude auto scale once if it is set to VI_TURE.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// CAT:SCALe:AUTO
        /// </param>
        /// <param name="Reference_Level">
        /// Defines the amplitude scale reference level.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_AMPLITUDE_SCALE_REFERENCE_LEVEL attribute.
        /// 
        /// Units: dB
        /// 
        /// Valid Range:
        /// 1   to  60
        /// 
        /// Default Value: 1.05
        /// 
        /// Note:
        /// Valid only when Auto Scale is VI_FALSE.
        /// 
        /// Command:
        /// [:SENSe]:CAT:SCALe:REFerence &lt;value&gt;
        /// </param>
        /// <param name="Scale_Per_Division">
        /// Defines the amplitude display scale per division.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_AMPLITUDE_SCALE_PER_DIVISION attribute.
        /// 
        /// Units: dB
        /// 
        /// Valid Range:
        /// 0.1   to  10
        /// 
        /// Default Value: 0.1
        /// 
        /// Note:
        /// Valid only when Auto Scale is VI_FALSE.
        /// 
        /// Command:
        /// [:SENSe]:CAT:SCALe:DIV &lt;value&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureReflectionMeasurementAmplitude(bool Auto_Scale, double Reference_Level, double Scale_Per_Division)
        {
            int pInvokeResult = PInvoke.ConfigureReflectionMeasurementAmplitude(this._handle, System.Convert.ToUInt16(Auto_Scale), Reference_Level, Scale_Per_Division);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Distance Unit, Start Distance Point and Stop Distance Point for reflection measurement.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Valid only when Reflection Measurement Type is Distance to Fault Measurement.
        /// </summary>
        /// <param name="Distance_Unit">
        /// Toggle the distance unit between meter and feet.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_DISTANCE_UNIT attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_DISTANCE_UNIT_METERS   -  Meters
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_DISTANCE_UNIT_FEET   -  Feet
        /// 
        /// Default Value: AGN934XNI_VAL_REFLECTION_MEASUREMENT_DISTANCE_UNIT_METERS
        /// 
        /// Command:
        /// [:SENSe]:CAT:DISTance:UNIT METers|FEET
        /// </param>
        /// <param name="Start_Distance_Point">
        /// Specifies the value for  Start Distance Point.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_DISTANCE_START attribute.
        /// 
        /// Units: 
        /// Specified by Distance Unit.
        /// 
        /// Valid Range:
        /// 0 to (stop distance - 0.1)
        /// 
        /// Default Value: 0.82
        /// 
        /// Command:
        /// [:SENSe]:CAT:DISTance:STARt &lt;distance&gt;
        /// </param>
        /// <param name="Stop_Distance_Point">
        /// Specifies the value for  Stop Distance Point.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_DISTANCE_STOP attribute.
        /// 
        /// Units: 
        /// Specified by Distance Unit.
        /// 
        /// Valid Range:
        /// should be greater than start distance + 0.1
        /// 
        /// Default Value: 9.89
        /// 
        /// Command:
        /// [:SENSe]:CAT:DISTance:STOP &lt;distance&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureReflectionMeasurementDistance(int Distance_Unit, double Start_Distance_Point, double Stop_Distance_Point)
        {
            int pInvokeResult = PInvoke.ConfigureReflectionMeasurementDistance(this._handle, Distance_Unit, Start_Distance_Point, Stop_Distance_Point);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Start Frequency/Stop Frequency or Center Frequency/Frequency Span for reflection measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Setting_Mode">
        /// Selects to set Start/Stop Frequency or Center Frequency/Frequency Span.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_FREQUENCY_SETTING_MODE_START_STOP   -  Start And Stop
        /// AGN934XNI_VAL_FREQUENCY_SETTING_MODE_CENTER_SPAN   -  Center And Span
        /// 
        /// Default Value: AGN934XNI_VAL_FREQUENCY_SETTING_MODE_START_STOP
        /// </param>
        /// <param name="Start_Frequency">
        /// Define the start frequency of reflection measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_START_FREQUENCY attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 5e6 to 7e9
        /// 
        /// Default Value: 5e6
        /// 
        /// Note:
        /// Valid only when Setting Mode is set to Start And Stop.
        /// 
        /// Command:
        /// [:SENSe]:CAT:FREQuency:STARt &lt;freq&gt;
        /// </param>
        /// <param name="Stop_Frequency">
        /// Define the stop frequency of reflection measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_STOP_FREQUENCY attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 5e6 to 7e9
        /// 
        /// Default Value: 1e9
        /// 
        /// Note:
        /// Valid only when Setting Mode is set to Start And Stop.
        /// 
        /// Command:
        /// [:SENSe]:CAT:FREQuency:STOP &lt;freq&gt;
        /// </param>
        /// <param name="Center_Frequency">
        /// Define the center frequency of reflection measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_CENTER_FREQUENCY attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 5e6 to 7e9
        /// 
        /// Default Value: 5.025e8
        /// 
        /// Note:
        /// Valid only when Setting Mode is set to Center And Span.
        /// 
        /// Command:
        /// [:SENSe]:CAT:FREQuency:CENTer &lt;freq&gt;
        /// </param>
        /// <param name="Frequency_Span">
        /// Defines the frequency span of current measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_FREQUENCY_SPAN attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 4.6e7 to 6.995e9
        /// 
        /// Default Value: 9.95e8
        /// 
        /// Note:
        /// Valid only when Setting Mode is set to Center And Span.
        /// 
        /// Command:
        /// [:SENSe]:CAT:FREQuency:SPAN &lt;freq&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureReflectionMeasurementFrequency(int Setting_Mode, double Start_Frequency, double Stop_Frequency, double Center_Frequency, double Frequency_Span)
        {
            int pInvokeResult = PInvoke.ConfigureReflectionMeasurementFrequency(this._handle, Setting_Mode, Start_Frequency, Stop_Frequency, Center_Frequency, Frequency_Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Calibration Type for reflection measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Calibration_Type">
        /// Toggles calibration type between full frequency range calibration and selected frequency range calibration.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_CALIBRATION_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_CALIBRATION_TYPE_FULL   -  Full Frequency Range Calibration
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_CALIBRATION_TYPE_SELECTED   -  Selected Frequency Range Calibration
        /// 
        /// Default Value: AGN934XNI_VAL_REFLECTION_MEASUREMENT_CALIBRATION_TYPE_SELECTED
        /// 
        /// Command:
        /// [:SENSe]:CAT:CALibrate:TYPE FULL|SELected
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureReflectionMeasurementCalibration(int Calibration_Type)
        {
            int pInvokeResult = PInvoke.ConfigureReflectionMeasurementCalibration(this._handle, Calibration_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Toggles the reflection measurement display mode between RL, VSWR and LIN. The RL stands for Return Loss, and LIN stands for Reflection Coefficient. It's only available for Reflection Measurement mode, and Distance to Fault measurement mode.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Valid only when Reflection Measurement Type is Distance to Fault Measurement.
        /// </summary>
        /// <param name="Display_Type">
        /// Selects the reflection measurement display mode.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_DISPLAY_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_DISPLAY_TYPE_RL - Return Loss mode
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_DISPLAY_TYPE_VSWR - VSWR mode
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_DISPLAY_TYPE_LIN - Reflection Coefficient mode
        /// 
        /// Default Value:
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_DISPLAY_TYPE_RL
        /// 
        /// Command:
        /// [:SENSe]:CAT:DISPlay:TYPE RL|VSWR|LIN
        /// </param>
        /// <param name="Enable_DTF_Frequency_Domain">
        /// Turn on/off frequency domain display in distance to fault measurement mode.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_DTF_FREQUENCY_DOMAIN_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Command:
        /// [:SENSe]:CAT:DTF:FVIew OFF|ON
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureReflectionMeasurementDispalyType(int Display_Type, bool Enable_DTF_Frequency_Domain)
        {
            int pInvokeResult = PInvoke.ConfigureReflectionMeasurementDispalyType(this._handle, Display_Type, System.Convert.ToUInt16(Enable_DTF_Frequency_Domain));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Measurement Type and  IIM State for reflection measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Measurement_Type">
        /// Toggles the reflection measurement mode between Reflection Measurement, One Port Insertion LossMeasurement and Distance to Fault Measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TYPE_REFLECTION_ONE_PORT_INSERTION_LOSS   -  One Port Insertion Loss Measurement
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TYPE_REFLECTION   -  Reflection Measurement
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TYPE_DISTANCE_TO_FAULT   -  Distance to Fault Measurement
        /// 
        /// Default Value: AGN934XNI_VAL_REFLECTION_MEASUREMENT_TYPE_DISTANCE_TO_FAULT
        /// 
        /// Command:
        /// [:SENSe]:CAT REFLection|OPCLoss|DTF
        /// </param>
        /// <param name="Enable_IIM">
        /// Turn on/off the IIM state for reflection measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_IIM_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Command:
        /// [:SENSe]:CAT:IIM[:STATe] OFF|ON
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureReflectionMeasurement(int Measurement_Type, bool Enable_IIM)
        {
            int pInvokeResult = PInvoke.ConfigureReflectionMeasurement(this._handle, Measurement_Type, System.Convert.ToUInt16(Enable_IIM));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Perform marker valley search once. The maker valley search can find the point with the lowest value in the current trace.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Command:
        /// :CALCulate:MARKer[1]|2|3|4|5|6:VALLey
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int StartMarkerValleySearch()
        {
            int pInvokeResult = PInvoke.StartMarkerValleySearch(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Perform marker peak search once.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Command:
        /// :CALCulate:MARKer[1]|2|3|4|5|6:PEAK
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int StartMarkerPeakSearch()
        {
            int pInvokeResult = PInvoke.StartMarkerPeakSearch(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Save the current trace data to memory.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Commands:
        /// [:SENSe]:CAT:TRACe:SAVE
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int SaveTraceData()
        {
            int pInvokeResult = PInvoke.SaveTraceData(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Turn on/off the IIM state for reflection measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_IIM">
        /// Turn on/off the IIM state for reflection measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_IIM_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Command:
        /// [:SENSe]:CAT:IIM[:STATe] OFF|ON
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int EnableReflectionMeasurementIIM(bool Enable_IIM)
        {
            int pInvokeResult = PInvoke.EnableReflectionMeasurementIIM(this._handle, System.Convert.ToUInt16(Enable_IIM));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Cable Type, Selected Cable, Cable Attenuation, Cable Velocity Factor for reflection measurement.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Valid only when Reflection Measurement Type is Distance to Fault Measurement.
        /// </summary>
        /// <param name="Cable_Type">
        /// Toggles the cable type between S1000, S2000, S2500 and custom cable type. It's only available for Distance To Fault measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_CABLE_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_CABLE_TYPE_S1000   -  S1000
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_CABLE_TYPE_S2000   -  S2000
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_CABLE_TYPE_S2500   -  S2500
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_CABLE_TYPE_CUSTOM   -  Custom
        /// 
        /// Default Value: AGN934XNI_VAL_REFLECTION_MEASUREMENT_CABLE_TYPE_CUSTOM
        /// 
        /// Command:
        /// [:SENSe]:CAT:CABLe:TYPE S1000| S2000| S2500|CUST
        /// </param>
        /// <param name="Cable_Name">
        /// Select a cable from built-in cable list.
        /// 
        /// Note:
        /// Valid only when Cable Type is standard.
        /// 
        /// Command:
        /// [:SENSe]:CAT:CABLe:LOAD &lt;string&gt;
        /// </param>
        /// <param name="Cable_Attenuation">
        /// Defines the attenuation value for a custom cable.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_CABLE_ATTENUATION attribute.
        /// 
        /// Units: 
        /// dB/m when Reflection Measurement Distance Unit is Meters.
        /// dB/ft when Reflection Measurement Distance Unit is Feet.
        /// 
        /// Valid Range:
        /// 0 to 5 when Reflection Measurement Distance Unit is Meters.
        /// 0 to 1.524 when Reflection Measurement Distance Unit is Feet.
        /// 
        /// Default Value: 0
        /// 
        /// Note:
        /// Valid only when Cable Type is Custom.
        /// 
        /// Command:
        /// [:SENSe]:CAT:CABLe:ATTenuation &lt;value&gt;
        /// </param>
        /// <param name="Cable_Velocity_Factor">
        /// Defines the velocity factor for a custom cable.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_CABLE_VELOCITY_FACTOR attribute.
        /// 
        /// Units: %
        /// 
        /// Valid Range:
        /// 1   to  100
        /// 
        /// Default Value: 100
        /// 
        /// Note:
        /// Valid only when Cable Type is Custom.
        /// 
        /// Command:
        /// [:SENSe]:CAT:CABLe:VELFactor &lt;value&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureReflectionMeasurementCable(int Cable_Type, string Cable_Name, double Cable_Attenuation, double Cable_Velocity_Factor)
        {
            int pInvokeResult = PInvoke.ConfigureReflectionMeasurementCable(this._handle, Cable_Type, Cable_Name, Cable_Attenuation, Cable_Velocity_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Average State and Average Number in SEM measurement.
        /// </summary>
        /// <param name="Average_Enable">
        /// Turn on/off the average in SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_AVERAGE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:SEMask:AVERage[:STATe] OFF|ON
        /// </param>
        /// <param name="Average_Number">
        /// Specifies average number in SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_AVERAGE_NUMBER attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 1   to  1000
        /// 
        /// Default Value: 10
        /// 
        /// Command:
        /// [:SENSe]:SEMask:AVERage:COUNt &lt;integer&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureSEMAverage(bool Average_Enable, int Average_Number)
        {
            int pInvokeResult = PInvoke.ConfigureSEMAverage(this._handle, System.Convert.ToUInt16(Average_Enable), Average_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the Channel Integrate Bandwidth, Center Frequency, Channel Span, Auto Total Power Reference State, Total Power Reference, Auto Resolution Bandwidth State and Resolution Bandwidth for SEM measurement.
        /// </summary>
        /// <param name="Channel_Integrate_Bandwidth">
        /// Specify reference channel integrate bandwidth in SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_CHANNEL_INTEGRATE_BANDWIDTH attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 100   to  5e6
        /// 
        /// Default Value: 3.84e6
        /// 
        /// Command:
        /// [:SENSe]:SEMask:BANDwidth|BWIDth:INTegration &lt;freq&gt;
        /// </param>
        /// <param name="Center_Frequency">
        /// Set center frequency in SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_CENTER_FREQUENCY attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 1.25e7   to  7.0375e9
        /// 
        /// Default Value: 1.5e9
        /// 
        /// Command:
        /// [:SENSe]:SEMask:FREQuency:CENTer &lt;freq&gt;
        /// </param>
        /// <param name="Channel_Span">
        /// Specify reference channel span in SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_CHANNEL_SPAN attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 100   to  5e7
        /// 
        /// Default Value: 5e6
        /// 
        /// Command:
        /// [:SENSe]:SEMask:FREQuency:SPAN &lt;freq&gt;
        /// </param>
        /// <param name="Auto_Total_Power_Reference">
        /// Automatically select the total power reference.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_AUTO_TOTAL_POWER_REFERENCE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// 
        /// Command:
        /// [:SENSe]:SEMask:CARRier:AUTO[:STATe] OFF|ON
        /// </param>
        /// <param name="Total_Power_Reference">
        /// Specify the total power reference in SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_TOTAL_POWER_REFERENCE attribute.
        /// 
        /// Units: dBm
        /// 
        /// Valid Range:
        /// -200   to  200
        /// 
        /// Default Value: -53.68
        /// 
        /// Command:
        /// [:SENSe]:SEMask:CARRier[:POWer] &lt;value&gt;
        /// </param>
        /// <param name="Auto_Resolution_Bandwidth">
        /// Automatically selects the resolution bandwidth to balance the measurement accuracy and test speed.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_AUTO_RESOLUTION_BANDWIDTH_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:SEMask:BANDwidth|BWIDth:AUTO OFF|ON
        /// </param>
        /// <param name="Resolution_Bandwidth">
        /// Specify resolution bandwidth of reference channel in SEM measurement
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_RESOLUTION_BANDWIDTH attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 10   to  3e6
        /// 
        /// Default Value: 3e4
        /// 
        /// Command:
        /// [:SENSe]:SEMask:BANDwidth|BWIDth &lt;freq&gt;
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureSEMRefChannel(double Channel_Integrate_Bandwidth, double Center_Frequency, double Channel_Span, bool Auto_Total_Power_Reference, double Total_Power_Reference, bool Auto_Resolution_Bandwidth, double Resolution_Bandwidth)
        {
            int pInvokeResult = PInvoke.ConfigureSEMRefChannel(this._handle, Channel_Integrate_Bandwidth, Center_Frequency, Channel_Span, System.Convert.ToUInt16(Auto_Total_Power_Reference), Total_Power_Reference, System.Convert.ToUInt16(Auto_Resolution_Bandwidth), Resolution_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Fail log/hold/beep status of SEM measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Enable_Log">
        /// Switch the Fail log status of SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_FAIL_LOG_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:SEMask:FAIL:LOG OFF|ON
        /// </param>
        /// <param name="Enable_Hold">
        /// Switch the Fail hold status of SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_FAIL_HOLD_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:SEMask:FAIL:HOLD OFF|ON
        /// </param>
        /// <param name="Enable_Beep">
        /// Switch the Fail beep status of SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_FAIL_BEEP_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// [:SENSe]:SEMask:FAIL:BEEP OFF|ON
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureSEMFailSettings(bool Enable_Log, bool Enable_Hold, bool Enable_Beep)
        {
            int pInvokeResult = PInvoke.ConfigureSEMFailSettings(this._handle, System.Convert.ToUInt16(Enable_Log), System.Convert.ToUInt16(Enable_Hold), System.Convert.ToUInt16(Enable_Beep));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the measurement type in SEM measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Measurement_Type">
        /// Switch the measurement type in SEM measurement.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_SEM_MEASUREMENT_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_MEASUREMENT_TYPE_TOTAL_POWER_REFERENCE   -  Total Power Reference
        /// AGN934XNI_VAL_SEM_MEASUREMENT_TYPE_PSD_REFERENCE   -  PSD Reference
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_MEASUREMENT_TYPE_TOTAL_POWER_REFERENCE
        /// 
        /// Command:
        /// [:SENSe]:SEMask:TYPE TPRef|PSDRef
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureSEMMeasurementType(int Measurement_Type)
        {
            int pInvokeResult = PInvoke.ConfigureSEMMeasurementType(this._handle, Measurement_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Choose the mask type in SEM measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Command:
        /// [:SENSe]:SEMask:OFFSet:LIST:TEST ABSolute|RELative|AND|OR,ABSolute|RELative|AND|OR,ABSolute|RELative|AND|OR,ABSolute|RELative|AND|OR,ABSolute|RELative|AND|OR
        /// </summary>
        /// <param name="Offset_A_Mask_Type">
        /// Specifies the mask type of Offset A.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE   -  Absolute
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_RELATIVE   -  Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_BOTH   -  Absolute and Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_EITHER   -  Absolute or Relative
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE
        /// </param>
        /// <param name="Offset_B_Mask_Type">
        /// Specifies the mask type of Offset B.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE   -  Absolute
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_RELATIVE   -  Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_BOTH   -  Absolute and Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_EITHER   -  Absolute or Relative
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE
        /// </param>
        /// <param name="Offset_C_Mask_Type">
        /// Specifies the mask type of Offset C.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE   -  Absolute
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_RELATIVE   -  Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_BOTH   -  Absolute and Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_EITHER   -  Absolute or Relative
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE
        /// </param>
        /// <param name="Offset_D_Mask_Type">
        /// Specifies the mask type of Offset D.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE   -  Absolute
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_RELATIVE   -  Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_BOTH   -  Absolute and Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_EITHER   -  Absolute or Relative
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE
        /// </param>
        /// <param name="Offset_E_Mask_Type">
        /// Specifies the mask type of Offset E.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE   -  Absolute
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_RELATIVE   -  Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_BOTH   -  Absolute and Relative
        /// AGN934XNI_VAL_SEM_OFFSET_MASK_EITHER   -  Absolute or Relative
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_OFFSET_MASK_ABSOLUTE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureSEMOffsetMask(int Offset_A_Mask_Type, int Offset_B_Mask_Type, int Offset_C_Mask_Type, int Offset_D_Mask_Type, int Offset_E_Mask_Type)
        {
            int pInvokeResult = PInvoke.ConfigureSEMOffsetMask(this._handle, Offset_A_Mask_Type, Offset_B_Mask_Type, Offset_C_Mask_Type, Offset_D_Mask_Type, Offset_E_Mask_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Start Frequency, Stop Frequency, Sweep Time, Resolution Bandwidth, Measurement Bandwidth, Abs StartAmpt, Abs StopAmpt, Relative StartAmpt, or Relative StopAmpt for SEM measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Commands:
        /// [:SENSe]:SEMask:OFFSet:LIST:FREQuency:STARt &lt;freq&gt;,&lt;freq&gt;,&lt;freq&gt;,&lt;freq&gt;,&lt;freq&gt;
        /// [:SENSe]:SEMask:OFFSet:LIST:FREQuency:STOP &lt;freq&gt;,&lt;freq&gt;,&lt;freq&gt;,&lt;freq&gt;,&lt;freq&gt;
        /// [:SENSe]:SEMask:OFFSet:LIST:SWEeptime &lt;time&gt;,&lt;time&gt;,&lt;time&gt;,&lt;time&gt;,&lt;time&gt;
        /// [:SENSe]:SEMask:OFFSet:LIST:BANDwidth|BWIDth[:RESolution] &lt;real_number&gt;,&lt;real_number&gt;, &lt;real_number&gt;,&lt;real_number&gt;,&lt;real_number&gt;
        /// [:SENSe]:SEMask:OFFSet:LIST:BANDwidth|BWIDth:MEASure &lt;Integer&gt;, &lt;Integer&gt;,&lt;Integer&gt;, &lt;Integer&gt;,&lt;Integer&gt;
        /// [:SENSe]:SEMask:OFFSet:LIST:STARt:ABSolute &lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;
        /// [:SENSe]:SEMask:OFFSet:LIST:STOP:ABSolute &lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;
        /// [:SENSe]:SEMask:OFFSet:LIST:STARt:RCARrier &lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;
        /// [:SENSe]:SEMask:OFFSet:LIST:STOP:RCARrier &lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;,&lt;ampl&gt;
        /// </summary>
        /// <param name="Characteristic_Type">
        /// Setects the offset characteristic to be set.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_START_FREQUENCY   -  Start Frequency
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_STOP_FREQUENCY   -  Stop Frequency
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_SWEEP_TIME   -  Sweep Time
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_RESOLUTION_BW   -  Resolution Bandwidth
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_MEASUREMENT_BW   -  Measurement Bandwidth   -  The values set down should be integer.
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_ABS_STARTAMPT   -  Abs StartAmpt  -  Before set it, the fail mask type should be set to "Absolute" or "Abs AND Rel" or "Abs OR Rel".
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_ABS_STOPAMPT   -  Abs StopAmpt -  Before set it, the fail mask type should be set to "Absolute" or "Abs AND Rel" or "Abs OR Rel".
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_RELATIVE_STARTAMPT   -  Relative StartAmpt  -  Before set it, the fail mask type should be set to "Relative" or "Abs AND Rel" or "Abs OR Rel".
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_RELATIVE_STOPAMPT   -  Relative StopAmpt  -  Before set it, the fail mask type should be set to "Relative" or "Abs AND Rel" or "Abs OR Rel".
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_START_FREQUENCY
        /// </param>
        /// <param name="Offset_A_Value">
        /// Specifies the value of Offset A.
        /// 
        /// Unit:
        /// Start Frequency : Hz
        /// Stop Frequency: Hz
        /// Sweep Time: s
        /// Resolution Bandwidth: Hz
        /// Measurement Bandwidth: none
        /// Abs StartAmpt: dBm
        /// Abs StopAmpt: dBm
        /// Relative StartAmpt: dBc
        /// Relative StopAmpt: dBc
        /// 
        /// Valid Range:
        /// Start Frequency : 0 to 5e7
        /// Stop Frequency: 100 to 5e7
        /// Sweep Time: 0 to 0.2773
        /// Resolution Bandwidth: 10 to 3e6
        /// Measurement Bandwidth: 1 to 1000
        /// Abs StartAmpt: -200 to 50
        /// Abs StopAmpt: -200 to 50
        /// Relative StartAmpt: -150 to 50
        /// Relative StopAmpt: -150 to 50
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Offset_B_Value">
        /// Specifies the value of Offset B.
        /// 
        /// Unit:
        /// Start Frequency : Hz
        /// Stop Frequency: Hz
        /// Sweep Time: s
        /// Resolution Bandwidth: Hz
        /// Measurement Bandwidth: none
        /// Abs StartAmpt: dBm
        /// Abs StopAmpt: dBm
        /// Relative StartAmpt: dBc
        /// Relative StopAmpt: dBc
        /// 
        /// Valid Range:
        /// Start Frequency : 0 to 5e7
        /// Stop Frequency: 100 to 5e7
        /// Sweep Time: 0 to 0.2773
        /// Resolution Bandwidth: 10 to 3e6
        /// Measurement Bandwidth: 1 to 1000
        /// Abs StartAmpt: -200 to 50
        /// Abs StopAmpt: -200 to 50
        /// Relative StartAmpt: -150 to 50
        /// Relative StopAmpt: -150 to 50
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Offset_C_Value">
        /// Specifies the value of Offset C.
        /// 
        /// Unit:
        /// Start Frequency : Hz
        /// Stop Frequency: Hz
        /// Sweep Time: s
        /// Resolution Bandwidth: Hz
        /// Measurement Bandwidth: none
        /// Abs StartAmpt: dBm
        /// Abs StopAmpt: dBm
        /// Relative StartAmpt: dBc
        /// Relative StopAmpt: dBc
        /// 
        /// Valid Range:
        /// Start Frequency : 0 to 5e7
        /// Stop Frequency: 100 to 5e7
        /// Sweep Time: 0 to 0.2773
        /// Resolution Bandwidth: 10 to 3e6
        /// Measurement Bandwidth: 1 to 1000
        /// Abs StartAmpt: -200 to 50
        /// Abs StopAmpt: -200 to 50
        /// Relative StartAmpt: -150 to 50
        /// Relative StopAmpt: -150 to 50
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Offset_D_Value">
        /// Specifies the value of Offset D.
        /// 
        /// Unit:
        /// Start Frequency : Hz
        /// Stop Frequency: Hz
        /// Sweep Time: s
        /// Resolution Bandwidth: Hz
        /// Measurement Bandwidth: none
        /// Abs StartAmpt: dBm
        /// Abs StopAmpt: dBm
        /// Relative StartAmpt: dBc
        /// Relative StopAmpt: dBc
        /// 
        /// Valid Range:
        /// Start Frequency : 0 to 5e7
        /// Stop Frequency: 100 to 5e7
        /// Sweep Time: 0 to 0.2773
        /// Resolution Bandwidth: 10 to 3e6
        /// Measurement Bandwidth: 1 to 1000
        /// Abs StartAmpt: -200 to 50
        /// Abs StopAmpt: -200 to 50
        /// Relative StartAmpt: -150 to 50
        /// Relative StopAmpt: -150 to 50
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Offset_E_Value">
        /// Specifies the value of Offset E.
        /// 
        /// Unit:
        /// Start Frequency : Hz
        /// Stop Frequency: Hz
        /// Sweep Time: s
        /// Resolution Bandwidth: Hz
        /// Measurement Bandwidth: none
        /// Abs StartAmpt: dBm
        /// Abs StopAmpt: dBm
        /// Relative StartAmpt: dBc
        /// Relative StopAmpt: dBc
        /// 
        /// Valid Range:
        /// Start Frequency : 0 to 5e7
        /// Stop Frequency: 100 to 5e7
        /// Sweep Time: 0 to 0.2773
        /// Resolution Bandwidth: 10 to 3e6
        /// Measurement Bandwidth: 1 to 1000
        /// Abs StartAmpt: -200 to 50
        /// Abs StopAmpt: -200 to 50
        /// Relative StartAmpt: -150 to 50
        /// Relative StopAmpt: -150 to 50
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureSEMOffset(int Characteristic_Type, double Offset_A_Value, double Offset_B_Value, double Offset_C_Value, double Offset_D_Value, double Offset_E_Value)
        {
            int pInvokeResult = PInvoke.ConfigureSEMOffset(this._handle, Characteristic_Type, Offset_A_Value, Offset_B_Value, Offset_C_Value, Offset_D_Value, Offset_E_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Start Frequency, Stop Frequency, Sweep Time, Resolution Bandwidth, Measurement Bandwidth, Abs StartAmpt, Abs StopAmpt, Relative StartAmpt, or Relative StopAmpt for SEM measurement.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Valid only when ChannelCharacteristic is Resolution Bandwidth or Sweep Time.
        /// 
        /// Commands:
        /// [:SENSe]:SEMask:OFFSet:LIST:BANDwidth|BWIDth[:RESolution]:AUTO OFF|ON
        /// [:SENSe]:SEMask:OFFSet:LIST:SWEeptime:AUTO OFF|ON
        /// </summary>
        /// <param name="Characteristic_Type">
        /// Setects the offset characteristic to be set.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_START_FREQUENCY   -  Start Frequency
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_STOP_FREQUENCY   -  Stop Frequency
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_SWEEP_TIME   -  Sweep Time
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_RESOLUTION_BW   -  Resolution Bandwidth
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_MEASUREMENT_BW   -  Measurement Bandwidth   -  The values set down should be integer.
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_ABS_STARTAMPT   -  Abs StartAmpt  -  Before set it, the fail mask type should be set to "Absolute" or "Abs AND Rel" or "Abs OR Rel".
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_ABS_STOPAMPT   -  Abs StopAmpt -  Before set it, the fail mask type should be set to "Absolute" or "Abs AND Rel" or "Abs OR Rel".
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_RELATIVE_STARTAMPT   -  Relative StartAmpt  -  Before set it, the fail mask type should be set to "Relative" or "Abs AND Rel" or "Abs OR Rel".
        /// AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_RELATIVE_STOPAMPT   -  Relative StopAmpt  -  Before set it, the fail mask type should be set to "Relative" or "Abs AND Rel" or "Abs OR Rel".
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_OFFSET_CHANNEL_CHARACTERISTIC_START_FREQUENCY
        /// </param>
        /// <param name="Auto_Offset_A">
        /// Turn on/off automatically setting of resolution bandwidth/sweep time of reference channel A in SEM measurement.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Auto_Offset_B">
        /// Turn on/off automatically setting of resolution bandwidth/sweep time of reference channel B in SEM measurement.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Auto_Offset_C">
        /// Turn on/off automatically setting of resolution bandwidth/sweep time of reference channel C in SEM measurement.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Auto_Offset_E">
        /// Turn on/off automatically setting of resolution bandwidth/sweep time of reference channel E in SEM measurement.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Auto_Offset_D">
        /// Turn on/off automatically setting of resolution bandwidth/sweep time of reference channel D in SEM measurement.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureAutoSEMOffset(int Characteristic_Type, bool Auto_Offset_A, bool Auto_Offset_B, bool Auto_Offset_C, bool Auto_Offset_E, bool Auto_Offset_D)
        {
            int pInvokeResult = PInvoke.ConfigureAutoSEMOffset(this._handle, Characteristic_Type, System.Convert.ToUInt16(Auto_Offset_A), System.Convert.ToUInt16(Auto_Offset_B), System.Convert.ToUInt16(Auto_Offset_C), System.Convert.ToUInt16(Auto_Offset_E), System.Convert.ToUInt16(Auto_Offset_D));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures normalize settings.
        /// </summary>
        /// <param name="Normalize_Enable">
        /// Turns on/off the normalize. 
        /// The driver uses this value to set the AGN934XNI_ATTR_TG_NORMALIZE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Normalize_Reference_Level">
        /// This parameter sets the normalization level.
        /// The driver uses this value to set the AGN934XNI_ATTR_TG_NORMALIZE_REFERENCE_LEVEL attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// -327.6   to  327.6
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Normalize_Reference_Position">
        /// This parameter sets the normalization reference position.
        /// The driver uses this value to set the AGN934XNI_ATTR_TG_NORMAILIZE_REFERENCE_POSITION attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 0   to  10
        /// 
        /// Default Value: 10
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureNormalize(bool Normalize_Enable, double Normalize_Reference_Level, int Normalize_Reference_Position)
        {
            int pInvokeResult = PInvoke.ConfigureNormalize(this._handle, System.Convert.ToUInt16(Normalize_Enable), Normalize_Reference_Level, Normalize_Reference_Position);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the tracking generator, including the output power, attenuation, amplitude offset, power sweep and output power tracking.
        /// </summary>
        /// <param name="Output_Enabled">
        /// Turns on/off the tracking generator output. 
        /// The driver uses this value to set the AGN934XNI_ATTR_TG_OUTPUT_AMPLITUDE_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Output_Power">
        /// This command sets the tracking generator output amplitude. This command is valid when tracking generator is enabled.
        /// The driver uses this value to set the AGN934XNI_ATTR_TG_OUTPUT_AMPLITUDE attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// -30   to  0
        /// 
        /// Default Value: -20
        /// </param>
        /// <param name="Output_Power_Step">
        /// This function sets the amplitude step size of the tracking generator output. This command is valid after tracking generator is enabled.
        /// The driver uses this value to set the AGN934XNI_ATTR_TG_OUTPUT_AMPLITUDE_STEP attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 2
        /// </param>
        /// <param name="Output_Power_Offset">
        /// Specifies an offset for the displayed output power level. An offset power level can be added to the displayed level to compensate for system losses (for example, cable loss) or gains (for example, preamplifier gain.) This offset does not change the power out of the source; it only changes the display so that it reads out the actual power delivered to the device under test.
        /// The driver uses this value to set the AGN934XNI_ATTR_TG_OUTPUT_AMPLITUDE_OFFSET attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: -20
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureTrackingGenerator(bool Output_Enabled, double Output_Power, double Output_Power_Step, double Output_Power_Offset)
        {
            int pInvokeResult = PInvoke.ConfigureTrackingGenerator(this._handle, System.Convert.ToUInt16(Output_Enabled), Output_Power, Output_Power_Step, Output_Power_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures marker demodulation settings.
        /// </summary>
        /// <param name="Demodulation_Function">
        /// Toggles the marker demodulation function between amplitude modulation and frequency modulation.
        /// The driver uses this value to set the AGN934XC_ATTR_MARKER_DEMODULATION_FUNCTION attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_MARKER_DEMODULATION_FUNCTION_AM   -  AM
        /// AGN934XNI_VAL_MARKER_DEMODULATION_FUNCTION_FM   -  FM
        /// 
        /// Default Value: AGN934XC_VAL_MARKER_DEMODULATION_FUNCTION_AM
        /// </param>
        /// <param name="Speaker_Volume">
        /// Sets the speaker volume for the demodulated signal.
        /// The driver uses this value to set the AGN934XC_ATTR_MARKER_DEMODULATION_SPEAKER_VOLUME attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 10
        /// </param>
        /// <param name="Delay_Time">
        /// Sets the delay time for the marker demodulation.
        /// The driver uses this value to set the AGN934XC_ATTR_MARKER_DEMODULATION_DELAY_TIME attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 6e-6
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureDemodulation(int Demodulation_Function, double Speaker_Volume, double Delay_Time)
        {
            int pInvokeResult = PInvoke.ConfigureDemodulation(this._handle, Demodulation_Function, Speaker_Volume, Delay_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables the active marker on the specified Trace.
        /// </summary>
        /// <param name="Marker_Enabled">
        /// Enables or disables the active marker. The driver uses this value to set the Marker Enabled attribute. See the attribute description for more details.
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_ENABLED attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Marker_Trace_Name">
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_TRACE attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureMarkerEnabled(bool Marker_Enabled, string Marker_Trace_Name)
        {
            int pInvokeResult = PInvoke.ConfigureMarkerEnabled(this._handle, System.Convert.ToUInt16(Marker_Enabled), Marker_Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the marker frequency counter resolution and enables or disables the marker frequency counter.
        /// </summary>
        /// <param name="Enabled">
        /// Enables or disables the marker frequency counter.
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_FREQUENCY_COUNTER_ENABLED attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Resolution">
        /// This parameter is provided to be compatible with IVI specification, setting this parameter has no influence on the connected instrument. 
        /// 
        /// Default Value: 0
        /// 
        /// Note:
        /// This parameter is not supported by the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureMarkerFrequencyCounter(bool Enabled, double Resolution)
        {
            int pInvokeResult = PInvoke.ConfigureMarkerFrequencyCounter(this._handle, System.Convert.ToUInt16(Enabled), Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures peak search settings.
        /// </summary>
        /// <param name="Marker_Continuous_Peaking_Enabl">
        /// Toggles the continuous peak search function between on and off.
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_CONTINUOUS_PEAKING_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Peak_Search_Mode">
        /// Specifies the peak search type. When it is set to maximum, the places the selected marker on the highest point on the assigned trace. When it is set to minimum, the places the selected marker on the lowest point on the assigned trace.
        /// The driver uses this value to set the AGN934XNI_ATTR_PEAK_SEARCH_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_PEAK_SEARCH_MODE_MAXIMUM   -  Maximum
        /// AGN934XNI_VAL_PEAK_SEARCH_MODE_MINIMUM   -  Minimum
        /// 
        /// Default Value: AGN934XC_VAL_PEAK_SEARCH_MODE_MAXIMUM
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureMarkerPeakSearch(bool Marker_Continuous_Peaking_Enabl, int Peak_Search_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureMarkerPeakSearch(this._handle, System.Convert.ToUInt16(Marker_Continuous_Peaking_Enabl), Peak_Search_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Peak Excursion and Marker Threshold attribute values.
        /// </summary>
        /// <param name="Peak_Excursion">
        /// Minimum amplitude variation of the signal that the marker can recognize as a peak in dB. The driver uses this value to set the Peak Excursion attribute. See the attribute description for more details.
        /// The driver uses this value to set the AGN934XNI_ATTR_PEAK_EXCURSION attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Marker_Threshold">
        /// Minimum amplitude below which a peak will not be detected. The driver uses this value to set the Marker Threshold attribute. See the attribute description for more details.
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_THRESHOLD attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value:
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureMarkerSearch(double Peak_Excursion, double Marker_Threshold)
        {
            int pInvokeResult = PInvoke.ConfigureMarkerSearch(this._handle, Peak_Excursion, Marker_Threshold);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the type of markers that you want to activate.
        /// 
        /// Notes:
        /// The user must call agn934xc_SetActiveMarker function ahead to specify the active marker before calling this function.
        /// </summary>
        /// <param name="Marker_Type">
        /// Selects the type of markers that you want to activate. 
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_MARKER_TYPE_NORMAL   -  Normal
        /// AGN934XNI_VAL_MARKER_TYPE_DELTA   -  Delta
        /// AGN934XNI_VAL_MARKER_TYPE_OFF   -  Off
        /// 
        /// Default Value: AGN934XNI_VAL_MARKER_TYPE_OFF
        /// </param>
        /// <param name="Marker_Function">
        /// selects the marker function for the designated marker.
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_FUNCTION attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_MARKER_FUNCTION_FCOUNT   -  Frequency Counter
        /// AGN934XNI_VAL_MARKER_FUNCTION_NOISE   -  Noise
        /// AGN934XNI_VAL_MARKER_FUNCTION_OFF   -  Normal
        /// 
        /// Default Value: AGN934XNI_VAL_MARKER_FUNCTION_OFF
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureMarkerType(int Marker_Type, int Marker_Function)
        {
            int pInvokeResult = PInvoke.ConfigureMarkerType(this._handle, Marker_Type, Marker_Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// If set to True , the active marker is enabled. When False, the active marker is disabled.
        /// </summary>
        /// <param name="Signal_Track_Enabled">
        /// This parameter is provided to be compatible with IVI specification, setting this parameter has no influence on the connected instrument.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureSignalTrackEnabled(bool Signal_Track_Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureSignalTrackEnabled(this._handle, System.Convert.ToUInt16(Signal_Track_Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function disables all markers.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int DisableAllMarkers()
        {
            int pInvokeResult = PInvoke.DisableAllMarkers(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the specific driver defined marker name that corresponds to the one-based index that the user specifies. If the driver defines a qualified marker name, this function returns the qualified name. If the value that the user passes for the Index parameter is less then one or greater than the value of the Marker Count attribute, the function returns an empty string in the Name parameter and returns the Invalid Value error.
        /// </summary>
        /// <param name="Index">
        /// A one-based index that defines which name to return.
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Name_Buffer_Size">
        /// Specifies the number of bytes in the ViChar array referenced by the Name parameter.
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Name">
        /// Specifies the buffer into which the function returns the name that corresponds to the index the user specifies.
        /// The caller may pass VI_NULL for this parameter if the NameBufferSize parameter is 0.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int GetMarkerName(int Index, int Name_Buffer_Size, System.Text.StringBuilder Name)
        {
            int pInvokeResult = PInvoke.GetMarkerName(this._handle, Index, Name_Buffer_Size, Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the frequency in Hertz or time position in seconds of the specified horizontal position.
        /// </summary>
        /// <param name="Marker_Position">
        /// Horizontal position (Hertz or seconds). The driver uses this value to set the Marker Position attribute. 
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_POSITION attribute.
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 3.4985E9
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int MoveMarker(double Marker_Position)
        {
            int pInvokeResult = PInvoke.MoveMarker(this._handle, Marker_Position);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the type of marker search and performs the search. This function returns the Marker Not Enabled error if the Marker Enabled attribute is set to False.
        /// </summary>
        /// <param name="Search_Type">
        /// Specifies the type of marker search.
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_PEAK_SEARCH attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_MARKER_SEARCH_HIGHEST   -  Highest
        /// AGN934XNI_VAL_MARKER_SEARCH_NEXT_PEAK_LEFT   -  Next Peak Left
        /// AGN934XNI_VAL_MARKER_SEARCH_NEXT_PEAK_RIGHT   -  Next Peak Right
        /// AGN934XNI_VAL_MARKER_SEARCH_NEXT_PEAK   -  Next Peak
        /// 
        /// Default Value: AGN934XNI_VAL_MARKER_SEARCH_HIGHEST
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int MarkerSearch(int Search_Type)
        {
            int pInvokeResult = PInvoke.MarkerSearch(this._handle, Search_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects one of the available markers, and makes it the active marker.
        /// </summary>
        /// <param name="Active_Marker">
        /// Marker to be selected. The driver uses this value to set the Active Marker attribute. 
        /// The driver uses this value to set the AGN9340NI_ATTR_ACTIVE_MARKER attribute.
        /// 
        /// Valid Range:
        /// "MARKER1" - Marker 1
        /// "MARKER2" - Marker 2
        /// "MARKER3" - Marker 3
        /// "MARKER4" - Marker 4
        /// "MARKER5" - Marker 5
        /// "MARKER6" - Marker 6
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int SetActiveMarker(string Active_Marker)
        {
            int pInvokeResult = PInvoke.SetActiveMarker(this._handle, Active_Marker);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function uses the Marker Position or Marker Amplitude attributes to configure the spectrum analyzer setting specified by the InstrumentSetting parameter.
        /// 
        /// This function may set the Frequency Start, Frequency Stop, or Reference Level attributes.
        /// If the Marker Enabled attribute is set to False, this function returns the Marker Not Enabled error. If the Marker Type attribute is not Delta and the InstrumentSetting parameter is Frequency Span, the function returns the Delta Marker Not Enabled error.
        /// </summary>
        /// <param name="Instrument_Setting">
        /// Specifies the instrument setting to be set from the marker position.
        /// The driver uses this value to set the AGN934XNI_ATTR_MARKER_INSTRUMENT_SETTING attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_INSTRUMENT_SETTING_FREQUENCY_CENTER   -  Frequency Center
        /// AGN934XNI_VAL_INSTRUMENT_SETTING_FREQUENCY_START   -  Frequency Start
        /// AGN934XNI_VAL_INSTRUMENT_SETTING_FREQUENCY_STOP   -  Frequency Stop
        /// Default Value: AGN934XNI_VAL_INSTRUMENT_SETTING_FREQUENCY_CENTER
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int SetInstrumentFromMarker(int Instrument_Setting)
        {
            int pInvokeResult = PInvoke.SetInstrumentFromMarker(this._handle, Instrument_Setting);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the horizontal position and the amplitude level of the active marker.
        /// </summary>
        /// <param name="Marker_Position">
        /// The frequency in Hertz or time position in seconds of the active marker (depending on the mode in which the analyzer is operating, frequency or time-domain). 
        /// </param>
        /// <param name="Marker_Amplitude">
        /// The amplitude of the active marker. The units are specified by the Amplitude Units attribute, except when the Marker Type attribute is set to Delta. Then the units are dB. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int QueryMarker(out double Marker_Position, out double Marker_Amplitude)
        {
            int pInvokeResult = PInvoke.QueryMarker(this._handle, out Marker_Position, out Marker_Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the type of the active marker.
        /// </summary>
        /// <param name="Marker_Type">
        /// Returns the type of the active marker.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int QueryMarkerType(out int Marker_Type)
        {
            int pInvokeResult = PInvoke.QueryMarkerType(this._handle, out Marker_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the specified limit line and measurement margin.
        /// </summary>
        /// <param name="Limit_Line">
        /// Specifies the limit line.
        /// 
        /// Valid Values: "1", "2"
        /// 
        /// Default Value: "1"
        /// </param>
        /// <param name="Enabled">
        /// Turns limit line testing on/off. The limit and margin will only be tested if they are displayer. If margin and limit display are both turned off, limit test is automatically turned off. 
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_LINE_ENABLED attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Type">
        /// Sets a limit line to be either an upper or lower type limit line. An upper line will be used as the maximum allowable value when comparing with the data. 
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_LINE_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_LIMIT_LINE_UPPER   -  Upper
        /// AGN934XNI_VAL_LIMIT_LINE_LOWER   -  Lower
        /// 
        /// Default Value: AGN934XNI_VAL_LIMIT_LINE_UPPER
        /// </param>
        /// <param name="X_Value">
        /// Toggles the limit line X- axis value between frequency and time.
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_LINE_X_VALUE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_LIMIT_LINE_FREQUENCY   -  Frequency
        /// AGN934XNI_VAL_LIMIT_LINE_TIME   -  Time
        /// 
        /// Default Value: AGN934XNI_VAL_LIMIT_LINE_FREQUENCY
        /// </param>
        /// <param name="Y_Value">
        /// Sets the Y- axis value of a limit line. Limit line Y- axis value is set independently and is not affected by the X- axis units.
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_LINE_Y_VALUE attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Limit_Mode">
        /// Toggles the limit line mode between fixed and relative.
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_LINE_MODE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_LIMIT_LINE_FIXED   -  Fixed
        /// AGN934XNI_VAL_LIMIT_LINE_RELATIVE   -  Relative
        /// 
        /// Default Value: AGN934XNI_VAL_LIMIT_LINE_FIXED
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureLimitLine(string Limit_Line, bool Enabled, int Type, int X_Value, double Y_Value, int Limit_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureLimitLine(this._handle, Limit_Line, System.Convert.ToUInt16(Enabled), Type, X_Value, Y_Value, Limit_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configure the limits values. A limit value contains 3 elements: X Axis Values, Amplitude and Is Connected Flag.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Not valid for demodulation mode.
        /// 
        /// Command:
        /// :CALCulate:LLINe[1]|2:DATA &lt;x-axis&gt;,&lt;ampl&gt;,&lt;connected&gt;{,&lt;x-axis&gt;,&lt;ampl&gt;,&lt;connected&gt;}
        /// </summary>
        /// <param name="Limit_Line">
        /// Specifies the limit line.
        /// 
        /// Valid Values: "1", "2"
        /// 
        /// Default Value: "1"
        /// </param>
        /// <param name="Limit_Value_Number">
        /// Specify the limit value number.
        /// 
        /// Valid Values:
        /// 1 to 32767
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="X_Axis_Values">
        /// This array specifies the x-axis values.
        /// </param>
        /// <param name="Amplitudes">
        /// This array specifies the amplitudes.
        /// </param>
        /// <param name="Is_Connected_Flags">
        /// This array specifies the is connected flags
        /// 
        /// Valid Values:
        /// 0, 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureLimitsValues(string Limit_Line, int Limit_Value_Number, double[] X_Axis_Values, double[] Amplitudes, ushort[] Is_Connected_Flags)
        {
            int pInvokeResult = PInvoke.ConfigureLimitsValues(this._handle, Limit_Line, Limit_Value_Number, X_Axis_Values, Amplitudes, Is_Connected_Flags);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the Limits Margin State, Limits Margin Value, Threshold State, Threshold Value.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Not valid for demodulation mode.
        /// </summary>
        /// <param name="Limit_Line">
        /// Specifies the limit line.
        /// 
        /// Valid Values: "1", "2"
        /// 
        /// Default Value: "1"
        /// </param>
        /// <param name="Enable_Limits_Margin">
        /// Turn on/off limit margin.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_LINE_MARGIN_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// :CALCulate:LLINe[1]|2:MARGin:STATe OFF|ON
        /// </param>
        /// <param name="Limits_Margin_Value">
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_LINE_MARGIN_VALUE attribute.
        /// 
        /// Units: dB
        /// 
        /// Valid Range:
        /// -200   to  200
        /// 
        /// Default Value: 0
        /// 
        /// Note:
        /// Valid only when Enable Limits Margin is enabled.
        /// 
        /// Command:
        /// :CALCulate:LLINe[1]|2:MARGin &lt;value&gt;
        /// </param>
        /// <param name="Enable_Threshold">
        /// Turn on/off the limit threshold.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_LINE_THRESHOLD_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// :CALCulate:LLINe[1]|2:STHReshold:STATe OFF|ON|
        /// </param>
        /// <param name="Threshold_Value">
        /// Set the limits statistics threshold value.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_LINE_THRESHOLD_VALUE attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 0   to  100
        /// 
        /// Note:
        /// Valid only when Enable Threshold is enabled.
        /// 
        /// Default Value: 80
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureLimitsMargin(string Limit_Line, bool Enable_Limits_Margin, double Limits_Margin_Value, bool Enable_Threshold, double Threshold_Value)
        {
            int pInvokeResult = PInvoke.ConfigureLimitsMargin(this._handle, Limit_Line, System.Convert.ToUInt16(Enable_Limits_Margin), Limits_Margin_Value, System.Convert.ToUInt16(Enable_Threshold), Threshold_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Delete the limits values.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Not valid for demodulation mode.
        /// 
        /// Commands:
        /// :CALCulate:LLINe[1]|2:DELete
        /// :CALCulate:LLINe:ALL:DELete
        /// </summary>
        /// <param name="Limit_Line">
        /// Specifies the limit line.
        /// 
        /// Valid Values: "1", "2"
        /// 
        /// Default Value: "1"
        /// </param>
        /// <param name="Operation">
        /// Select the delete operation.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_LIMIT_VALUE_DELETE_LAST   -  Delete The Last One
        /// AGN934XNI_VAL_LIMIT_VALUE_DELETE_ALL   -  Delete All
        /// 
        /// Default Value: AGN934XNI_VAL_LIMIT_VALUE_DELETE_LAST
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int DeleteLimitsData(string Limit_Line, int Operation)
        {
            int pInvokeResult = PInvoke.DeleteLimitsData(this._handle, Limit_Line, Operation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Turn on/off the limit beep status.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Not valid for demodulation mode.
        /// </summary>
        /// <param name="Enable_Limit_Beep">
        /// Turn on/off the limit beep status.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_LIMIT_BEEP_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// Command:
        /// :CALCulate:LLINe:CONTrol:BEEP OFF|ON
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int EnableLimitBeep(bool Enable_Limit_Beep)
        {
            int pInvokeResult = PInvoke.EnableLimitBeep(this._handle, System.Convert.ToUInt16(Enable_Limit_Beep));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the trigger source that causes the spectrum analyzer to leave the Wait-for-Trigger state.
        /// </summary>
        /// <param name="Trigger_Source">
        /// Specifies the trigger source that causes the analyzer to leave the Wait-For-Trigger state.
        /// The driver uses this value to set the AGN934XNI_ATTR_TRIGGER_SOURCE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_TRIGGER_SOURCE_EXTERNAL   -  External
        /// AGN934XNI_VAL_TRIGGER_SOURCE_IMMEDIATE   -  Immediate
        /// AGN934XNI_VAL_TRIGGER_SOURCE_VIDEO   -  Video
        /// 
        /// Default Value: AGN934XNI_VAL_TRIGGER_SOURCE_IMMEDIATE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureTriggerSource(int Trigger_Source)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerSource(this._handle, Trigger_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the trigger settings on the spectrum analyzer.
        /// 
        /// Note:
        /// Trigger subsystem is only valid when the analyzer is in zero span.
        /// </summary>
        /// <param name="Trigger_Delay_Time_Enable">
        /// Toggles the trigger delay time between on and off.
        /// The driver uses this value to set the AGN934XNI_ATTR_TRIGGER_DELAY_TIME_ENABLE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <param name="Trigger_Delay_Time">
        /// Specifies trigger delay time for video or external trigger signal.
        /// The driver uses this value to set the AGN934XNI_ATTR_TRIGGER_DELAY_TIME attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 6e-6
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureTriggerDelay(bool Trigger_Delay_Time_Enable, double Trigger_Delay_Time)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerDelay(this._handle, System.Convert.ToUInt16(Trigger_Delay_Time_Enable), Trigger_Delay_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies at which level and slope of the external trigger signal, acquisition is triggered. This is applicable when the Trigger Source attribute is set to External.
        /// </summary>
        /// <param name="External_Trigger_Level">
        /// This parameter is provided to be compatible with IVI specification, setting this parameter has no influence on the connected instrument.
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="External_Trigger_Slope">
        /// Specifies which slope of the external trigger signal triggers the acquisition. The driver uses this value to set the External Trigger Slope attribute.
        /// The driver uses this value to set the AGN934XNI_ATTR_EXTERNAL_TRIGGER_SLOPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_EXTERNAL_TRIGGER_SLOPE_POSITIVE   -  Positive
        /// AGN934XNI_VAL_EXTERNAL_TRIGGER_SLOPE_NEGATIVE   -  Negative
        /// 
        /// Default Value: AGN934XNI_VAL_EXTERNAL_TRIGGER_SLOPE_POSITIVE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureExternalTrigger(double External_Trigger_Level, int External_Trigger_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureExternalTrigger(this._handle, External_Trigger_Level, External_Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies at which level and slope of the video signal, acquisition is triggered. This is applicable when the Trigger Source attribute is set to Video.
        /// </summary>
        /// <param name="Video_Trigger_Level">
        /// Specifies the level that the video signal shall reach to trigger the acquisition.
        /// The driver uses this value to set the AGN934XNI_ATTR_VIDEO_TRIGGER_LEVEL attribute.
        /// 
        /// Units: 
        /// 
        /// Valid Range:
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Video_Trigger_Slope">
        /// This parameter is provided to be compatible with IVI specification, setting this parameter has no influence on the connected instrument.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_VIDEO_TRIGGER_SLOPE_POSITIVE
        /// AGN934XNI_VAL_VIDEO_TRIGGER_SLOPE_NEGATIVE
        /// 
        /// Default Value: 
        /// AGN934XNI_VAL_VIDEO_TRIGGER_SLOPE_POSITIVE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureVideoTrigger(double Video_Trigger_Level, int Video_Trigger_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureVideoTrigger(this._handle, Video_Trigger_Level, Video_Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function modifies a trace to be the point by point sum of two other traces. Any data in the destination trace is deleted.
        /// 
        /// DestinationTrace = Trace1 + Trace2
        /// </summary>
        /// <param name="Destination_Trace">
        /// Specifies the name of the result .
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Trace1">
        /// Specifies the name of first trace operand.
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Trace2">
        /// Specifies the name of the second trace operand.
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int AddTraces(string Destination_Trace, string Trace1, string Trace2)
        {
            int pInvokeResult = PInvoke.AddTraces(this._handle, Destination_Trace, Trace1, Trace2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Copies the data array from one trace into another trace. Any data in the Destination Trace is deleted.
        /// </summary>
        /// <param name="Destination_Trace">
        /// Specifies the name of the Destination Trace.
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Source_Trace">
        /// Specifies the name of the Source Trace.
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int CopyTrace(string Destination_Trace, string Source_Trace)
        {
            int pInvokeResult = PInvoke.CopyTrace(this._handle, Destination_Trace, Source_Trace);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Exchanges the data arrays of two traces.
        /// </summary>
        /// <param name="Trace1">
        /// Specifies the name of first trace operand.
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Trace2">
        /// Specifies the name of the second trace operand.
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ExchangeTraces(string Trace1, string Trace2)
        {
            int pInvokeResult = PInvoke.ExchangeTraces(this._handle, Trace1, Trace2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function modifies a trace to be the point by point difference between two traces. Any data in the destination trace is deleted.
        /// 
        /// DestinationTrace = Trace1 ?C Trace2
        /// </summary>
        /// <param name="Destination_Trace">
        /// Specifies the name of the result trace.
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Trace1">
        /// Specifies the name of the first trace operand.
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Trace2">
        /// Specified the name of the second trace operand.
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int SubtractTraces(string Destination_Trace, string Trace1, string Trace2)
        {
            int pInvokeResult = PInvoke.SubtractTraces(this._handle, Destination_Trace, Trace1, Trace2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Retarts the trace average. This command is only available when average is on.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int RestartTraceAverage()
        {
            int pInvokeResult = PInvoke.RestartTraceAverage(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the read-only Trace Size attribute.
        /// </summary>
        /// <param name="Trace_Name">
        /// Specifies the Trace name.
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Trace_Size">
        /// Returns the size of the Trace.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int QueryTraceSize(string Trace_Name, out int Trace_Size)
        {
            int pInvokeResult = PInvoke.QueryTraceSize(this._handle, Trace_Name, out Trace_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Trace Type attribute.
        /// </summary>
        /// <param name="Trace_Name">
        /// Specifies the trace name.
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Trace_Type">
        /// Specifies the type of trace.
        /// The driver uses this value to set the AGN934XNI_ATTR_TRACE_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_TRACE_TYPE_CLEAR_WRITE   -  Clear Write
        /// AGN934XNI_VAL_TRACE_TYPE_MAX_HOLD   -  Maximum Hold
        /// AGN934XNI_VAL_TRACE_TYPE_MIN_HOLD   -  Minimum Hold
        /// AGN934XNI_VAL_TRACE_TYPE_VIEW   -  View
        /// AGN934XNI_VAL_TRACE_TYPE_STORE   -  Store
        /// 
        /// Default Value: AGN934XNI_VAL_TRACE_TYPE_CLEAR_WRITE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureTraceType(string Trace_Name, int Trace_Type)
        {
            int pInvokeResult = PInvoke.ConfigureTraceType(this._handle, Trace_Name, Trace_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures trace settings.
        /// </summary>
        /// <param name="Trace_Math_Function_Enable">
        /// If this parameter is VI_FALSE, the trace math function will be turned off and other configuration will be ignored.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <param name="Trace_Math_Type">
        /// Toggles the trace math by log power and power.
        /// The driver uses this value to set the AGN934XNI_ATTR_TRACE_MATH_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_TRACE_MATH_TYPE_LOG_POWER   -  Log Power
        /// AGN934XNI_VAL_TRACE_MATH_TYPE_POWER   -  Power
        /// 
        /// Default Value: AGN934XNI_VAL_TRACE_MATH_TYPE_LOG_POWER
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureTrace(bool Trace_Math_Function_Enable, int Trace_Math_Type)
        {
            int pInvokeResult = PInvoke.ConfigureTrace(this._handle, System.Convert.ToUInt16(Trace_Math_Function_Enable), Trace_Math_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the specific driver defined trace name that corresponds to the one-based index that the user specifies. If the driver defines a qualified trace name, this property returns the qualified name. If the value that the user passes for the Index parameter is less than one or greater than the value of the Trace Count attribute, the function returns an empty string in the Name parameter and returns the Invalid Value error.
        /// </summary>
        /// <param name="Index">
        /// A one-based index that defines which name to return.
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Name_Buffer_Size">
        /// Specifies the number of bytes in the ViChar array referenced by the Name parameter.
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Name">
        /// Specifies the buffer into which the function returns the name that corresponds to the index the user specifies.
        /// The caller may pass VI_NULL for this parameter if the NameBufferSize parameter is 0.
        /// 
        /// Default Value: VI_NULL
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int GetTraceName(int Index, int Name_Buffer_Size, System.Text.StringBuilder Name)
        {
            int pInvokeResult = PInvoke.GetTraceName(this._handle, Index, Name_Buffer_Size, Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects one of the available traces, and makes it the active trace.
        /// </summary>
        /// <param name="Active_Trace">
        /// Set the active trace name.
        /// The driver uses this value to set the AGN934XNI_ATTR_ACTIVE_TRACE attribute.
        /// 
        /// Valid Range:
        /// "TRACE1" - Trace 1
        /// "TRACE2" - Trace 2
        /// "TRACE3" - Trace 3
        /// "TRACE4" - Trace 4
        /// 
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int SetActiveTrace(string Active_Trace)
        {
            int pInvokeResult = PInvoke.SetActiveTrace(this._handle, Active_Trace);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Reads the measurement result from the spectrum analyzer (AM Demodulation Measurement).
        /// 
        /// Note:
        /// (1) This function is only applicable for N9322C.
        /// (2) User should use agn934xni_ConfigureMeasurementType function to change the mode to AGN934XNI_VAL_INSTRUMENT_MODE_DEMODULATION and use ConfigureDemodulationMode function to change the demodulation mode to AGN934XNI_VAL_DEMODULATION_MODE_AM before using this function. 
        /// (3) User should invoke agn934xni_ConfigureAMFMMeasurement function to disable the averaging before calling this function. 
        /// 
        /// Command:
        /// :CALCulate:DATA?
        /// </summary>
        /// <param name="Max_Time">
        /// Sets the timeout for fetching operation.
        /// 
        /// Unit: ms
        /// 
        /// Default Value: 5000
        /// </param>
        /// <param name="Array_Length">
        /// Specified the Output array length
        /// 
        /// Default Value: 3
        /// </param>
        /// <param name="Carrier_Power">
        /// Returns the carrier power.
        /// 
        /// Unit: dBm
        /// </param>
        /// <param name="Modulation_Rate">
        /// Returns the modulation rate.
        /// 
        /// Unit: Hz
        /// </param>
        /// <param name="Am_Depth">
        /// Returns the AM depth.
        /// 
        /// Unit: %
        /// </param>
        /// <param name="Sinad">
        /// Returns the SINAD.
        /// 
        /// Unit: dB
        /// </param>
        /// <param name="THD">
        /// Returns the THD.
        /// 
        /// Unit: dB
        /// </param>
        /// <param name="Carrier_Freq_Offset">
        /// Returns the carrier frequency offset.
        /// 
        /// Unit: Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn9320ni_error_message function.  To obtain additional information about the error condition, call the agn9320ni_GetError function.  To clear the error information from the driver, call the agn9320ni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadAMMeasurementData(int Max_Time, int Array_Length, double[] Carrier_Power, double[] Modulation_Rate, double[] Am_Depth, double[] Sinad, double[] THD, double[] Carrier_Freq_Offset)
        {
            int pInvokeResult = PInvoke.ReadAMMeasurementData(this._handle, Max_Time, Array_Length, Carrier_Power, Modulation_Rate, Am_Depth, Sinad, THD, Carrier_Freq_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Reads the measurement result from the spectrum analyzer (FM Demodulation Measurement).
        /// 
        /// Note:
        /// (1) This function is only applicable for N9322C.
        /// (2) User should use agn934xni_ConfigureMeasurementType function to change the mode to AGN934XNI_VAL_INSTRUMENT_MODE_DEMODULATION and use ConfigureDemodulationMode function to change the demodulation mode to AGN934XNI_VAL_DEMODULATION_MODE_FM before using this function. 
        /// (3) User should invoke agn934xni_ConfigureAMFMMeasurement function to disable the averaging before calling this function. 
        /// 
        /// Command:
        /// :CALCulate:DATA?
        /// </summary>
        /// <param name="Max_Time">
        /// Sets the timeout for fetching operation.
        /// 
        /// Unit: ms
        /// 
        /// Default Value: 5000
        /// </param>
        /// <param name="Array_Length">
        /// Specified the Output array length
        /// 
        /// Default Value: 3
        /// </param>
        /// <param name="Carrier_Power">
        /// Returns the carrier power.
        /// 
        /// Unit: dBm
        /// </param>
        /// <param name="Modulation_Rate">
        /// Returns the modulation rate.
        /// 
        /// Unit: Hz
        /// </param>
        /// <param name="Frequency_Deviation">
        /// Returns the Frequency Deviation.
        /// 
        /// Unit: Hz
        /// </param>
        /// <param name="Sinad">
        /// Returns the SINAD.
        /// 
        /// Unit: dB
        /// </param>
        /// <param name="THD">
        /// Returns the THD.
        /// 
        /// Unit: dB
        /// </param>
        /// <param name="Carrier_Freq_Offset">
        /// Returns the carrier frequency offset.
        /// 
        /// Unit: Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn9320ni_error_message function.  To obtain additional information about the error condition, call the agn9320ni_GetError function.  To clear the error information from the driver, call the agn9320ni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadFMMeasurementData(int Max_Time, int Array_Length, double[] Carrier_Power, double[] Modulation_Rate, double[] Frequency_Deviation, double[] Sinad, double[] THD, double[] Carrier_Freq_Offset)
        {
            int pInvokeResult = PInvoke.ReadFMMeasurementData(this._handle, Max_Time, Array_Length, Carrier_Power, Modulation_Rate, Frequency_Deviation, Sinad, THD, Carrier_Freq_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Reads the measurement result from the spectrum analyzer (ASK Demodulation Measurement).
        /// 
        /// Note:
        /// (1) This function is only applicable for N9322C.
        /// (2) User should use agn934xni_ConfigureMeasurementType function to change the mode to AGN934XNI_VAL_INSTRUMENT_MODE_DEMODULATION and use ConfigureDemodulationMode function to change the demodulation mode to AGN934XNI_VAL_DEMODULATION_MODE_ASK before using this function. 
        /// (3) User should invoke agn934xni_ConfigureASKFSKMeasurement function to disable the averaging before calling this function. 
        /// 
        /// Command:
        /// :CALCulate:DATA?
        /// </summary>
        /// <param name="Max_Time">
        /// Sets the timeout for fetching operation.
        /// 
        /// Unit: ms
        /// 
        /// Default Value: 5000
        /// </param>
        /// <param name="Array_Length">
        /// Specified the Output array length
        /// 
        /// Default Value: 3
        /// </param>
        /// <param name="Carrier_Power">
        /// Returns the carrier power.
        /// 
        /// Unit: dBm
        /// </param>
        /// <param name="Ask_Depth">
        /// Return the ASK depth in the sequence of Current Value, Max Value and Min Value.
        /// 
        /// Unit: %
        /// </param>
        /// <param name="Ask_Error">
        /// Return the ASK error in the sequence of Current Value, Max Value and Min Value.
        /// 
        /// Unit: %
        /// </param>
        /// <param name="Ask_Index">
        /// Return the ASK Index in the sequence of Current Value, Max Value and Min Value.
        /// 
        /// Unit: %
        /// </param>
        /// <param name="Carrier_Freq_Offset">
        /// Returns the carrier frequency offset.
        /// 
        /// Unit: Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn9320ni_error_message function.  To obtain additional information about the error condition, call the agn9320ni_GetError function.  To clear the error information from the driver, call the agn9320ni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadASKMeasurementData(int Max_Time, int Array_Length, double[] Carrier_Power, double[] Ask_Depth, double[] Ask_Error, double[] Ask_Index, double[] Carrier_Freq_Offset)
        {
            int pInvokeResult = PInvoke.ReadASKMeasurementData(this._handle, Max_Time, Array_Length, Carrier_Power, Ask_Depth, Ask_Error, Ask_Index, Carrier_Freq_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the measurement result from the spectrum analyzer (FSK Demodulation Measurement) based on the user specified sFSKple duration.
        /// 
        /// Note:
        /// (1) This function is only applicable for N9322C.
        /// (2) User should use agn934xni_ConfigureMeasurementType function to change the mode to AGN934XNI_VAL_INSTRUMENT_MODE_DEMODULATION and use ConfigureDemodulationMode function to change the demodulation mode to AGN934XNI_VAL_DEMODULATION_MODE_FSK before using this function. 
        /// (3) User should invoke agn934xni_ConfigureASKFSKMeasurement function to disable the averaging before calling this function.
        /// 
        /// Command:
        /// :CALCulate:DATA? 
        /// </summary>
        /// <param name="Max_Time">
        /// Sets the timeout for fetching operation.
        /// 
        /// Unit: ms
        /// 
        /// Default Value: 5000
        /// </param>
        /// <param name="Array_Length">
        /// Specified the Output array length
        /// 
        /// Default Value: 3
        /// </param>
        /// <param name="Carrier_Power">
        /// Return the Carrier Power in the sequence of Current Value, Max Value and Min Value.
        /// 
        /// Unit: dBm
        /// </param>
        /// <param name="Deviation">
        /// Return the Deviation in the sequence of Current Value, Max Value and Min Value.
        /// 
        /// Unit: Hz
        /// </param>
        /// <param name="Fsk_Error">
        /// Return the FSK Error in the sequence of Current Value, Max Value and Min Value.
        /// 
        /// Unit: %
        /// </param>
        /// <param name="Mag_Error">
        /// Return the Mag Error in the sequence of Current Value, Max Value and Min Value.
        /// 
        /// Unit: %
        /// </param>
        /// <param name="Carrier_Freq_Offset">
        /// Return the Carrier Frequency Offset in the sequence of Current Value, Max Value and Min Value.
        /// 
        /// Unit: Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn9320ni_error_message function.  To obtain additional information about the error condition, call the agn9320ni_GetError function.  To clear the error information from the driver, call the agn9320ni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadFSKMeasurementData(int Max_Time, int Array_Length, double[] Carrier_Power, double[] Deviation, double[] Fsk_Error, double[] Mag_Error, double[] Carrier_Freq_Offset)
        {
            int pInvokeResult = PInvoke.ReadFSKMeasurementData(this._handle, Max_Time, Array_Length, Carrier_Power, Deviation, Fsk_Error, Mag_Error, Carrier_Freq_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Read Depth, Current Carrier Power, Current Modulation Rate, Frequency Deviation for AM or FM modulation.
        /// 
        /// Notes:
        /// (1) This function is only for N9322C model.
        /// (2) Valid only for AM/FM mode.
        /// </summary>
        /// <param name="Max_Time">
        /// Pass the maximum length of time in which to allow the read measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the AGN934XNI_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call agn934xni_Abort to cancel the read measurement operation and return the spectrum analyzer to the Idle state.
        /// 
        /// Units:  milliseconds.  
        /// 
        /// Defined Values:
        /// AGN934XNI_VAL_MAX_TIME_INFINITE (-1)
        /// AGN934XNI_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Depth">
        /// Returns the AM depth measurement result.
        /// 
        /// Unit: %
        /// 
        /// Note:
        /// Valid only for AM mode.
        /// 
        /// Command:
        /// :CALCulate:AM:MDEPth?
        /// </param>
        /// <param name="Carrier_Power">
        /// Returns the AM/FM carrier power measurement result.
        /// 
        /// Unit: dBm
        /// 
        /// Command:
        /// :CALCulate:AMA:POWer?
        /// </param>
        /// <param name="Modulation_Rate">
        /// Returns the modulation rate measurement result in AM/FM memodulation analysis.
        /// 
        /// Unit: Hz
        /// 
        /// Command:
        /// :CALCulate:AMA:MRATe?
        /// </param>
        /// <param name="Frequency_Deviation">
        /// Retruns frequency deviation test result.
        /// 
        /// Unit: Hz
        /// 
        /// Note:
        /// Only valid for FM mode.
        /// 
        /// Command:
        /// :CALCulate:FM:FDEViation?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadModulationData(int Max_Time, out double Depth, out double Carrier_Power, out double Modulation_Rate, out double Frequency_Deviation)
        {
            int pInvokeResult = PInvoke.ReadModulationData(this._handle, Max_Time, out Depth, out Carrier_Power, out Modulation_Rate, out Frequency_Deviation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Query ASK/FSK measurement trace data.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Command:
        /// :TRACe[:DATA]?
        /// </summary>
        /// <param name="Max_Time">
        /// Pass the maximum length of time in which to allow the read measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the AGN934XNI_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call agn934xni_Abort to cancel the read measurement operation and return the spectrum analyzer to the Idle state.
        /// 
        /// Units:  milliseconds.  
        /// 
        /// Defined Values:
        /// AGN934XNI_VAL_MAX_TIME_INFINITE (-1)
        /// AGN934XNI_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Measurement_Trace_Result_Array">
        /// Returns the measurement trace result.
        /// </param>
        /// <param name="Array_Size">
        /// Specifies the size of Measurement Trace Result Array.
        /// 
        /// Default Value: 18
        /// </param>
        /// <param name="Actual_Returned_Data_Number">
        /// Returns the actual returned data number.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadMeasurementTraceData(int Max_Time, double[] Measurement_Trace_Result_Array, int Array_Size, out int Actual_Returned_Data_Number)
        {
            int pInvokeResult = PInvoke.ReadMeasurementTraceData(this._handle, Max_Time, Measurement_Trace_Result_Array, Array_Size, out Actual_Returned_Data_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Query the quantity of limit fail test points.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Limit_Failure_Count">
        /// Returns the quantity of limit fail test points. If get the result 0, it means power meter test result pass the limit.
        /// 
        /// Command:
        /// :CALCulate:LIMit:FCOunt?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadLimitTestResult(out int Limit_Failure_Count)
        {
            int pInvokeResult = PInvoke.ReadLimitTestResult(this._handle, out Limit_Failure_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Query the result of limit line or limit in reflection measurement.
        /// 
        /// Note:
        /// This function is valid in all models.
        /// </summary>
        /// <param name="Limit_Line">
        /// Specifies the limit line.
        /// 
        /// Valid Values: "1", "2"
        /// 
        /// Default Value: "1"
        /// </param>
        /// <param name="Limit_Result">
        /// Returns the result of limit line or limit in reflection measurement.
        /// 
        /// 
        /// Command:
        /// :CALCulate:LLINe[1]|2:FAIL?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadCurrentLimitsResult(string Limit_Line, out int Limit_Result)
        {
            int pInvokeResult = PInvoke.ReadCurrentLimitsResult(this._handle, Limit_Line, out Limit_Result);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Query current reference marker X/Y axis value.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="X_Axis_Value">
        /// Returns current reference marker X axis value.
        /// 
        /// Command:
        /// :CALCulate:MARKer[1]|2|3|4|5|6:RX?
        /// </param>
        /// <param name="Y_Axis_Value">
        /// Returns current reference marker Y axis value.
        /// 
        /// Command:
        /// :CALCulate:MARKer[1]|2|3|4|5|6:RY?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadReferenceMarker(out double X_Axis_Value, out double Y_Axis_Value)
        {
            int pInvokeResult = PInvoke.ReadReferenceMarker(this._handle, out X_Axis_Value, out Y_Axis_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Query the current trace data.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Max_Time">
        /// Pass the maximum length of time in which to allow the read measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the AGN934XNI_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call agn934xni_Abort to cancel the read measurement operation and return the spectrum analyzer to the Idle state.
        /// 
        /// Units:  milliseconds.  
        /// 
        /// Defined Values:
        /// AGN934XNI_VAL_MAX_TIME_INFINITE (-1)
        /// AGN934XNI_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Data_Type">
        /// Toggles the trace type returned between current measurement result and the trace data saved in memory.
        /// 
        /// The driver uses this value to set the AGN934XNI_ATTR_REFLECTION_MEASUREMENT_TRACE_DISPLAY_TYPE attribute.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_TYPE_DATA   -  Current Measurement Result
        /// AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_TYPE_MEM   -  The Trace Data Saved In Memory
        /// 
        /// Default Value: AGN934XNI_VAL_REFLECTION_MEASUREMENT_TRACE_TYPE_DATA
        /// 
        /// Command:
        /// :TRACe[:DATA]? DATA|MEM
        /// </param>
        /// <param name="Result_Array">
        /// Returns the trace date.
        /// </param>
        /// <param name="Result_Array_Length">
        /// Specifies the length of the Result Array.
        /// 
        /// Default Value: 1000
        /// </param>
        /// <param name="Actual_Number">
        /// Returns the autual number of trace data.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadReflectionMeasurementTraceData(int Max_Time, int Data_Type, double[] Result_Array, int Result_Array_Length, out int Actual_Number)
        {
            int pInvokeResult = PInvoke.ReadReflectionMeasurementTraceData(this._handle, Max_Time, Data_Type, Result_Array, Result_Array_Length, out Actual_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Query the measured power / peak power frequency of each upper offset channel in SEM measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Commands:
        /// [:SENSe]:SEMask:OFFSet:LIST:LOWer:POWer?
        /// [:SENSe]:SEMask:OFFSet:LIST:UPPer:POWer?
        /// [:SENSe]:SEMask:OFFSet:LIST:LOWer:PEAK:FREQuency?
        /// [:SENSe]:SEMask:OFFSet:LIST:Upper:PEAK:FREQuency?
        /// </summary>
        /// <param name="Max_Time">
        /// Pass the maximum length of time in which to allow the read measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the AGN934XNI_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call agn934xni_Abort to cancel the read measurement operation and return the spectrum analyzer to the Idle state.
        /// 
        /// Units:  milliseconds.  
        /// 
        /// Defined Values:
        /// AGN934XNI_VAL_MAX_TIME_INFINITE (-1)
        /// AGN934XNI_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Data_Type">
        /// Sepcifies which data type to read.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_OFFSET_DATA_LOWER_POWER   -  Lower Power
        /// AGN934XNI_VAL_SEM_OFFSET_DATA_UPPER_POWER   -  Upper Power
        /// AGN934XNI_VAL_SEM_OFFSET_DATA_LOWER_PEAK_FREQUENCY   -  Lower Peak Frequency
        /// AGN934XNI_VAL_SEM_OFFSET_DATA_UPPER_PEAK_FREQUENCY   -  Upper Peak Frequency
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_OFFSET_DATA_LOWER_POWER
        /// </param>
        /// <param name="Offset_A_Value">
        /// Returns the value of Offset A.
        /// </param>
        /// <param name="Offset_B_Value">
        /// Returns the value of Offset B.
        /// </param>
        /// <param name="Offset_C_Value">
        /// Returns the value of Offset C.
        /// </param>
        /// <param name="Offset_D_Value">
        /// Returns the value of Offset D.
        /// </param>
        /// <param name="Offset_E_Value">
        /// Returns the value of Offset E.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadSEMData(int Max_Time, int Data_Type, out double Offset_A_Value, out double Offset_B_Value, out double Offset_C_Value, out double Offset_D_Value, out double Offset_E_Value)
        {
            int pInvokeResult = PInvoke.ReadSEMData(this._handle, Max_Time, Data_Type, out Offset_A_Value, out Offset_B_Value, out Offset_C_Value, out Offset_D_Value, out Offset_E_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Query fail flag of each lower/upper offset channel in SEM measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// 
        /// Commands:
        /// [:SENSe]:SEMask:OFFSet:LIST:LOWer:FAIL?
        /// [:SENSe]:SEMask:OFFSet:LIST:Upper:FAIL?
        /// </summary>
        /// <param name="Max_Time">
        /// Pass the maximum length of time in which to allow the read measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the AGN934XNI_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call agn934xni_Abort to cancel the read measurement operation and return the spectrum analyzer to the Idle state.
        /// 
        /// Units:  milliseconds.  
        /// 
        /// Defined Values:
        /// AGN934XNI_VAL_MAX_TIME_INFINITE (-1)
        /// AGN934XNI_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Flag_Type">
        /// Sepcifies lower or upper flag to read.
        /// 
        /// Valid Values:
        /// AGN934XNI_VAL_SEM_OFFSET_FAIL_FLAG_LOWER   -  Lower
        /// AGN934XNI_VAL_SEM_OFFSET_FAIL_FLAG_UPPER   -  Upper
        /// 
        /// Default Value: AGN934XNI_VAL_SEM_OFFSET_FAIL_FLAG_LOWER
        /// </param>
        /// <param name="Offset_A_Result">
        /// Returns the fail flag of Offset A.
        /// </param>
        /// <param name="Offset_B_Result">
        /// Returns the fail flag of Offset B.
        /// </param>
        /// <param name="Offset_C_Result">
        /// Returns the fail flag of Offset C.
        /// </param>
        /// <param name="Offset_D_Result">
        /// Returns the fail flag of Offset D.
        /// </param>
        /// <param name="Offset_E_Result">
        /// Returns the fail flag of Offset E.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadSEMFailFlag(int Max_Time, int Flag_Type, out bool Offset_A_Result, out bool Offset_B_Result, out bool Offset_C_Result, out bool Offset_D_Result, out bool Offset_E_Result)
        {
            ushort Offset_A_ResultAsUShort;
            ushort Offset_B_ResultAsUShort;
            ushort Offset_C_ResultAsUShort;
            ushort Offset_D_ResultAsUShort;
            ushort Offset_E_ResultAsUShort;
            int pInvokeResult = PInvoke.ReadSEMFailFlag(this._handle, Max_Time, Flag_Type, out Offset_A_ResultAsUShort, out Offset_B_ResultAsUShort, out Offset_C_ResultAsUShort, out Offset_D_ResultAsUShort, out Offset_E_ResultAsUShort);
            Offset_A_Result = System.Convert.ToBoolean(Offset_A_ResultAsUShort);
            Offset_B_Result = System.Convert.ToBoolean(Offset_B_ResultAsUShort);
            Offset_C_Result = System.Convert.ToBoolean(Offset_C_ResultAsUShort);
            Offset_D_Result = System.Convert.ToBoolean(Offset_D_ResultAsUShort);
            Offset_E_Result = System.Convert.ToBoolean(Offset_E_ResultAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Query the marker readout of Y axis in SEM measurement.
        /// 
        /// Note:
        /// This function is only for N9322C model.
        /// </summary>
        /// <param name="Y_Marker">
        /// Returns the marker readout of Y axis in SEM measurement.
        /// 
        /// Command:
        /// [:SENSe]:SEMask:MARKer[1]|2|3|4|5|6:Y?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// WARNINGS:
        /// 3FFA2001  The instrument was in an uncalibrated state
        ///           when the measurement was taken.
        /// 3FFA2002  The measurement taken was over the instrument's
        ///           range.
        ///   
        /// ERRORS:
        /// BFFA2001  The Active Marker is not enabled.
        /// BFFA2002  The Active Marker is not a delta marker.
        /// BFFA2003  The maximum waiting time for this operation was
        ///           exceeded.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI    Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA   Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI    Errors
        /// BFFF0000 to BFFFFFFF     VISA   Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadSEMYMarker(out double Y_Marker)
        {
            int pInvokeResult = PInvoke.ReadSEMYMarker(this._handle, out Y_Marker);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a signal acquisition based on the present instrument configuration. It then waits for the acquisition to complete, and returns the trace as an array of amplitude values. The amplitude array returns data that represent the amplitude of the signals obtained by sweeping from the start frequency to the stop frequency (in frequency domain, in time domain the amplitude array is ordered from beginning of sweep to end). The Amplitude Units attribute determines the units of the points in the amplitude array. This function resets the sweep count.
        /// 
        /// If the spectrum analyzer did not complete the acquisition within the time period the user specified with the MaxTime parameter, the function returns the Max Time Exceeded error.
        /// 
        /// After this function executes, each element in the amplitude array parameter is either a amplitude or a value indicating that the spectrum analyzer could not sample an amplitude.
        /// </summary>
        /// <param name="Trace_Name">
        /// Specifies the trace to return.
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Max_Time_Milliseconds">
        /// Specifies the maximum length of time allowed for the function to complete in milliseconds.
        /// 
        /// Default Value: 5000
        /// </param>
        /// <param name="Array_Length">
        /// Specifies the number of points in the Amplitude array .
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Actual_Points">
        /// Specifies the number of points actually returned in the Amplitude array.
        /// </param>
        /// <param name="Amplitude">
        /// Specifies a user allocated buffer into which the trace amplitudes are stored.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ReadYTrace(string Trace_Name, int Max_Time_Milliseconds, int Array_Length, out int Actual_Points, double[] Amplitude)
        {
            int pInvokeResult = PInvoke.ReadYTrace(this._handle, Trace_Name, Max_Time_Milliseconds, Array_Length, out Actual_Points, Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a ACPR measurement acquisition based on the present instrument configuration.  It then waits for the acquisition to complete, and returns the ACPR measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) If the spectrum analyzer did not complete the acquisition within the time period the user specified with the maxTime parameter, the function returns Max Time Exceeded error.
        /// </summary>
        /// <param name="Max_Time">
        /// Pass the maximum length of time in which to allow the read measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the AGN934XNI_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call agn934xni_Abort to cancel the read measurement operation and return the spectrum analyzer to the Idle state.
        /// 
        /// Units:  milliseconds.  
        /// 
        /// Defined Values:
        /// AGN934XNI_VAL_MAX_TIME_INFINITE (-1)
        /// AGN934XNI_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Low_ACP">
        /// Return the lower adjacent channel power of ACPR measurement.
        /// 
        /// Unit: dBm
        /// </param>
        /// <param name="Low_ACPR">
        /// Return the lower adjacent channel power to main channel power ratio.
        /// 
        /// Unit: dB
        /// </param>
        /// <param name="Upper_ACP">
        /// Return the upper adjacent channel power of ACPR measurement.
        /// 
        /// Unit: dBm
        /// </param>
        /// <param name="Upper_ACPR">
        /// Return the upper adjacent channel power to main channel power ratio.
        /// 
        /// Unit: dB
        /// </param>
        /// <param name="Main_Channel_Power">
        /// Returns the value of main channel power in the current amplitude units.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ReadMeasurementACPR(int Max_Time, out double Low_ACP, out double Low_ACPR, out double Upper_ACP, out double Upper_ACPR, out double Main_Channel_Power)
        {
            int pInvokeResult = PInvoke.ReadMeasurementACPR(this._handle, Max_Time, out Low_ACP, out Low_ACPR, out Upper_ACP, out Upper_ACPR, out Main_Channel_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a CHP measurement acquisition based on the present instrument configuration.  It then waits for the acquisition to complete, and returns the CHP measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) If the spectrum analyzer did not complete the acquisition within the time period the user specified with the maxTime parameter, the function returns Max Time Exceeded error.
        /// </summary>
        /// <param name="Max_Time">
        /// Pass the maximum length of time in which to allow the read measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the AGN934XNI_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call agn934xni_Abort to cancel the read measurement operation and return the spectrum analyzer to the Idle state.
        /// 
        /// Units:  milliseconds.  
        /// 
        /// Defined Values:
        /// AGN934XNI_VAL_MAX_TIME_INFINITE (-1)
        /// AGN934XNI_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Main_Channel_Power">
        /// Returns the value of the channel power in amplitude units.
        /// </param>
        /// <param name="Power_Density">
        /// Returns the value of the channel power density in amplitude units/Hz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ReadMeasurementCHP(int Max_Time, out double Main_Channel_Power, out double Power_Density)
        {
            int pInvokeResult = PInvoke.ReadMeasurementCHP(this._handle, Max_Time, out Main_Channel_Power, out Power_Density);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a OBW measurement acquisition based on the present instrument configuration.  It then waits for the acquisition to complete, and returns the OBW measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) If the spectrum analyzer did not complete the acquisition within the time period the user specified with the maxTime parameter, the function returns Max Time Exceeded error.
        /// </summary>
        /// <param name="Max_Time">
        /// Pass the maximum length of time in which to allow the read measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the AGN934XNI_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code.  When this occurs, you can call agn934xni_Abort to cancel the read measurement operation and return the spectrum analyzer to the Idle state.
        /// 
        /// Units:  milliseconds.  
        /// 
        /// Defined Values:
        /// AGN934XNI_VAL_MAX_TIME_INFINITE (-1)
        /// AGN934XNI_VAL_MAX_TIME_IMMEDIATE (0)          
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Notes:
        /// 
        /// (1) The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Occupied_Bandwidth">
        /// Returns scalar results of occupied bandwidth in Hz.
        /// </param>
        /// <param name="Bandwidth_Centroid">
        /// Returns the bandwidth centroid.
        /// </param>
        /// <param name="X_Db_Bandwidth">
        /// Returns a single value that corresponds to the x DB Bandwidth in Hz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ReadMeasurementOBW(int Max_Time, out double Occupied_Bandwidth, out double Bandwidth_Centroid, out double X_Db_Bandwidth)
        {
            int pInvokeResult = PInvoke.ReadMeasurementOBW(this._handle, Max_Time, out Occupied_Bandwidth, out Bandwidth_Centroid, out X_Db_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function aborts a previously initiated measurement and returns the spectrum analyzer to the idle state.
        /// This function does not check instrument status.
        /// 
        /// Note:
        /// The instrument doesn't support this function.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int Abort()
        {
            int pInvokeResult = PInvoke.Abort(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines and returns the status of an acquisition.
        /// </summary>
        /// <param name="Status">
        /// Returns the acquisition status.
        /// 
        /// Default Value: VI_NULL
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int AcquisitionStatus(out int Status)
        {
            int pInvokeResult = PInvoke.AcquisitionStatus(this._handle, out Status);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates an acquisition. After calling this function, the spectrum analyzer leaves the idle state.
        /// 
        /// This function does not check the instrument status. The user calls the Acquisition Status function to determine when the acquisition is complete.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int Initiate()
        {
            int pInvokeResult = PInvoke.Initiate(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trace the spectrum analyzer acquires. The trace is from a previously initiated acquisition. The user calls the Initiate function to start an acquisition. The user calls the Acquisition Status function to determine when the acquisition is complete.
        /// The user may call the Read Y Trace function instead of the Initiate function. This function starts an acquisition, waits for the acquisition to complete, and returns the trace in one function call.
        /// 
        /// The Amplitude array returns data that represents the amplitude of the signals obtained by sweeping from the start frequency to the stop frequency (in frequency domain, in time domain the amplitude array is ordered from beginning of sweep to end). The Amplitude Units attribute determines the units of the points in the Amplitude array.
        /// 
        /// After this function executes, each element in the amplitude array parameter is either a amplitude or a value indicating that the spectrum analyzer could not sample an amplitude.
        /// This function does not check the instrument status. The user calls the Error Query function at the conclusion of the sequence to check the instrument status.
        /// </summary>
        /// <param name="Trace_Name">
        /// Specifies the trace to return.
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Array_Length">
        /// Specifies the number of array points requested.
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Actual_Points">
        /// This input parameter can be used to provide a previously allocated spectrum.
        /// </param>
        /// <param name="Amplitude">
        /// Specifies a user allocated buffer into which the trace amplitudes are stored.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int FetchYTrace(string Trace_Name, int Array_Length, out int Actual_Points, double[] Amplitude)
        {
            int pInvokeResult = PInvoke.FetchYTrace(this._handle, Trace_Name, Array_Length, out Actual_Points, Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ACPR measurement the spectrum analyzer acquires. The measurement is from a previously initiated acquisition.  You use the agn934xni_Initiate function to start an acquisition.  You use the agn934xni_AcquisitionStatus function to determine when the acquisition is complete.
        /// 
        /// You can call the Read Measurement ACPR function instead of the Initiate function. This function starts an acquisition, waits for the acquisition to complete, and returns the measurement in one function call.
        /// 
        /// This function does not check the instrument status. Typically, the end-user calls this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. The end-user uses the low-level functions to optimize one or more aspects of interaction with the instrument. Call the agn934xni_error_query function at the conclusion of the sequence to check the instrument status.
        /// </summary>
        /// <param name="Low_ACP">
        /// Return the lower adjacent channel power of ACPR measurement.
        /// 
        /// Unit: dBm
        /// </param>
        /// <param name="Low_ACPR">
        /// Return the lower adjacent channel power to main channel power ratio.
        /// 
        /// Unit: dB
        /// </param>
        /// <param name="Upper_ACP">
        /// Return the upper adjacent channel power of ACPR measurement.
        /// 
        /// Unit: dBm
        /// </param>
        /// <param name="Upper_ACPR">
        /// Return the upper adjacent channel power to main channel power ratio.
        /// 
        /// Unit: dB
        /// </param>
        /// <param name="Main_Channel_Power">
        /// Returns the value of main channel power in the current amplitude units.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int FetchMeasurementACPR(out double Low_ACP, out double Low_ACPR, out double Upper_ACP, out double Upper_ACPR, out double Main_Channel_Power)
        {
            int pInvokeResult = PInvoke.FetchMeasurementACPR(this._handle, out Low_ACP, out Low_ACPR, out Upper_ACP, out Upper_ACPR, out Main_Channel_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the CHP measurement the spectrum analyzer acquires. The measurement is from a previously initiated acquisition.  You use the agn934xni_Initiate function to start an acquisition.  You use the agn934xni_AcquisitionStatus function to determine when the acquisition is complete.
        /// 
        /// You can call the Read Measurement CHP function instead of the Initiate function. This function starts an acquisition, waits for the acquisition to complete, and returns the measurement in one function call.
        /// 
        /// This function does not check the instrument status. Typically, the end-user calls this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. The end-user uses the low-level functions to optimize one or more aspects of interaction with the instrument. Call the agn934xni_error_query function at the conclusion of the sequence to check the instrument status.
        /// </summary>
        /// <param name="Main_Channel_Power">
        /// Returns the value of the channel power in amplitude units.
        /// </param>
        /// <param name="Power_Density">
        /// Returns the value of the channel power density in amplitude units/Hz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int FetchMeasurementCHP(out double Main_Channel_Power, out double Power_Density)
        {
            int pInvokeResult = PInvoke.FetchMeasurementCHP(this._handle, out Main_Channel_Power, out Power_Density);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the OBW measurement the spectrum analyzer acquires. The measurement is from a previously initiated acquisition.  You use the agn934xni_Initiate function to start an acquisition.  You use the agn934xni_AcquisitionStatus function to determine when the acquisition is complete.
        /// 
        /// You can call the Read Measurement BOW function instead of the Initiate function. This function starts an acquisition, waits for the acquisition to complete, and returns the measurement in one function call.
        /// 
        /// This function does not check the instrument status. Typically, the end-user calls this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. The end-user uses the low-level functions to optimize one or more aspects of interaction with the instrument. Call the agn934xni_error_query function at the conclusion of the sequence to check the instrument status.
        /// </summary>
        /// <param name="Occupied_Bandwidth">
        /// Returns scalar results of occupied bandwidth in Hz.
        /// </param>
        /// <param name="Bandwidth_Centroid">
        /// Returns the bandwidth centroid.
        /// </param>
        /// <param name="X_Db_Bandwidth">
        /// Returns a single value that corresponds to the x DB Bandwidth in Hz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int FetchMeasurementOBW(out double Occupied_Bandwidth, out double Bandwidth_Centroid, out double X_Db_Bandwidth)
        {
            int pInvokeResult = PInvoke.FetchMeasurementOBW(this._handle, out Occupied_Bandwidth, out Bandwidth_Centroid, out X_Db_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the instrument to a known state and sends initialization commands to the instrument.  The initialization commands set instrument settings such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the instrument and applies initial user specified settings from the Logical Name which was used to initialize the session.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ResetWithDefaults()
        {
            int pInvokeResult = PInvoke.ResetWithDefaults(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function places the instrument in a quiescent state where it has minimal or no impact on the system to which it is connected.
        /// 
        /// Note:
        /// The instrument doesn't support this function.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int Disable()
        {
            int pInvokeResult = PInvoke.Disable(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function runs the instrument's self test routine and returns the test result(s). 
        /// 
        /// 
        /// </summary>
        /// <param name="Self_Test_Result">
        /// This control contains the value returned from the instrument self test.  Zero means success.  For any other code, see the device's operator's manual.
        /// 
        /// Self-Test Code    Description
        /// ---------------------------------------
        ///    0              Passed self test
        ///    1              Self test failed
        /// 
        /// 
        /// </param>
        /// <param name="Self_Test_Message">
        /// Returns the self-test response string from the instrument. See the device's operation manual for an explanation of the string's contents.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// 
        /// Note:
        /// This instrument doesn't return the self-test message.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the revision numbers of the instrument driver and instrument firmware.
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Driver_Revision">
        /// Returns the instrument driver software revision numbers in the form of a string.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// </param>
        /// <param name="Firmware_Revision">
        /// Returns the instrument firmware revision numbers in the form of a string.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int revision_query(System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Instrument_Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads an error code and a message from the instrument's error queue.
        /// 
        /// 
        /// </summary>
        /// <param name="Error_Code">
        /// Returns the error code read from the instrument's error queue.
        /// 
        /// 
        /// </param>
        /// <param name="Error_Message">
        /// Returns the error message string read from the instrument's error message queue.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int error_query(out int Error_Code, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.error_query(this._handle, out Error_Code, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function invalidates the cached values of all attributes for the session.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int InvalidateAllAttributes()
        {
            int pInvokeResult = PInvoke.InvalidateAllAttributes(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coercion information associated with the IVI session.  This function retrieves and clears the oldest instance in which the instrument driver coerced a value you specified to another value.
        /// 
        /// If you set the AGN934XNI_ATTR_RECORD_COERCIONS attribute to VI_TRUE, the instrument driver keeps a list of all coercions it makes on ViInt32 or ViReal64 values you pass to instrument driver functions.  You use this function to retrieve information from that list.
        /// 
        /// If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Coercion Record buffer parameter.
        /// 
        /// The function returns an empty string in the Coercion Record parameter if no coercion records remain for the session.
        /// 
        /// 
        /// </summary>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the Coercion Record parameter.
        /// 
        /// If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Coercion Record buffer parameter.
        /// 
        /// Default Value:  None
        /// 
        /// 
        /// </param>
        /// <param name="Coercion_Record">
        /// Returns the next coercion record for the IVI session.  If there are no coercion records, the function returns an empty string.
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter.  If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// This parameter returns an empty string if no coercion records remain for the session.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int GetNextCoercionRecord(int Buffer_Size, System.Text.StringBuilder Coercion_Record)
        {
            int pInvokeResult = PInvoke.GetNextCoercionRecord(this._handle, Buffer_Size, Coercion_Record);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the interchangeability warnings associated with the IVI session. It retrieves and clears the oldest instance in which the class driver recorded an interchangeability warning.  Interchangeability warnings indicate that using your application with a different instrument might cause different behavior. You use this function to retrieve interchangeability warnings.
        /// 
        /// The driver performs interchangeability checking when the AGN934XNI_ATTR_INTERCHANGE_CHECK attribute is set to VI_TRUE.
        /// 
        /// The function returns an empty string in the Interchange Warning parameter if no interchangeability warnings remain for the session.
        /// 
        /// In general, the instrument driver generates interchangeability warnings when an attribute that affects the behavior of the instrument is in a state that you did not specify.
        /// 
        /// </summary>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the Interchange Warning parameter.
        /// 
        /// If the next interchangeability warning string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Interchange Warning buffer parameter.
        /// 
        /// Default Value:  None
        /// 
        /// </param>
        /// <param name="Interchange_Warning">
        /// Returns the next interchange warning for the IVI session. If there are no interchange warnings, the function returns an empty  string.
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter. If the next interchangeability warning string, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// This parameter returns an empty string if no interchangeability
        /// warnings remain for the session.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int GetNextInterchangeWarning(int Buffer_Size, System.Text.StringBuilder Interchange_Warning)
        {
            int pInvokeResult = PInvoke.GetNextInterchangeWarning(this._handle, Buffer_Size, Interchange_Warning);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function clears the list of current interchange warnings.
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ClearInterchangeWarnings()
        {
            int pInvokeResult = PInvoke.ClearInterchangeWarnings(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// When developing a complex test system that consists of multiple test modules, it is generally a good idea to design the test modules so that they can run in any order.  To do so requires ensuring that each test module completely configures the state of each instrument it uses.  If a particular test module does not completely configure the state of an instrument, the state of the instrument depends on the configuration from a previously executed test module.  If you execute the test modules in a different order, the behavior of the instrument and therefore the entire test module is likely to change.  This change in behavior is generally instrument specific and represents an interchangeability problem.
        /// 
        /// You can use this function to test for such cases.  After you call this function, the interchangeability checking algorithms in the specific driver ignore all previous configuration operations.  By calling this function at the beginning of a test module, you can determine whether the test module has dependencies on the operation of previously executed test modules.
        /// 
        /// This function does not clear the interchangeability warnings from the list of previously recorded interchangeability warnings.  If you want to guarantee that the agn934xni_GetNextInterchangeWarning function only returns those interchangeability warnings that are generated after calling this function, you must clear the list of interchangeability warnings.  You can clear the interchangeability warnings list by repeatedly calling the agn934xni_GetNextInterchangeWarning function until no more interchangeability warnings are returned.  If you are not interested in the content of those warnings, you can call the agn934xni_ClearInterchangeWarnings function.
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ResetInterchangeCheck()
        {
            int pInvokeResult = PInvoke.ResetInterchangeCheck(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes a user-specified string to the instrument.
        /// 
        /// Note:  This function bypasses IVI attribute state caching.  Therefore, when you call this function, the cached values for all attributes will be invalidated.
        /// </summary>
        /// <param name="Write_Buffer">
        /// Pass the string to be written to the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int WriteInstrData(string Write_Buffer)
        {
            int pInvokeResult = PInvoke.WriteInstrData(this._handle, Write_Buffer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads data from the instrument.
        /// </summary>
        /// <param name="Number_of_Bytes_To_Read">
        /// Pass the maximum number of bytes to read from the instruments.  
        /// 
        /// Valid Range:  0 to the number of elements in the Read Buffer.
        /// 
        /// Default Value:  256
        /// 
        /// 
        /// </param>
        /// <param name="Read_Buffer">
        /// After this function executes, this parameter contains the data that was read from the instrument.
        /// </param>
        /// <param name="Num_Bytes_Read">
        /// Returns the number of bytes actually read from the instrument and stored in the Read Buffer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the agn934xni_error_message function.  To obtain additional information about the error condition, call the agn934xni_GetError function.  To clear the error information from the driver, call the agn934xni_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        ///        0  No error (the call was successful).
        /// 
        /// 3FFC0101  ID Query not supported.
        /// 3FFC0102  Reset not supported.
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFA0000  Cannot load IVI engine.
        /// BFFA0001  Instrument error. Call agn934xni_error_query.
        /// BFFA000C  Invalid attribute.
        /// BFFA000D  Attribute is not writable.
        /// BFFA000E  Attribute is not readable.
        /// BFFA000F  Invalid parameter.
        /// BFFA0010  Invalid value.
        /// BFFA0012  Attribute not supported.
        /// BFFA0013  Value not supported.
        /// BFFA0014  Invalid type.
        /// BFFA0015  Types do not match.
        /// BFFA0016  Attribute already has a value waiting to be updated.
        /// BFFA0018  Not a valid configuration.
        /// BFFA0019  Requested item does not exist or value not available.
        /// BFFA001A  Requested attribute value not known.
        /// BFFA001B  No range table.
        /// BFFA001C  Range table is invalid.
        /// BFFA001F  No channel table has been built for the session.
        /// BFFA0020  Channel name specified is not valid.
        /// BFFA0044  Channel name required.
        /// BFFA0045  Channel name not allowed.
        /// BFFA0046  Attribute not valid for channel.
        /// BFFA0047  Attribute must be channel based.
        /// BFFA0054  Bad channel name in Channel List.
        /// BFFA2003  Marker is not enabled.
        /// BFFA4001  Trace is not enabled.
        /// 
        /// BFFC0011  Instrument returned invalid response to ID Query.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  A "no listeners" condition was detected.
        /// BFFF0060  This interface is not the controller-in-charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ReadInstrData(int Number_of_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int Num_Bytes_Read)
        {
            int pInvokeResult = PInvoke.ReadInstrData(this._handle, Number_of_Bytes_To_Read, Read_Buffer, out Num_Bytes_Read);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
            }
            this._disposed = true;
        }

        public int GetInt32(agn934xniProperties propertyId, string repeatedCapabilityOrChannel)
        {
            int val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public int GetInt32(agn934xniProperties propertyId)
        {
            return this.GetInt32(propertyId, "");
        }

        public double GetDouble(agn934xniProperties propertyId, string repeatedCapabilityOrChannel)
        {
            double val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public double GetDouble(agn934xniProperties propertyId)
        {
            return this.GetDouble(propertyId, "");
        }

        public string GetString(agn934xniProperties propertyId, string repeatedCapabilityOrChannel)
        {
            System.Text.StringBuilder newVal = new System.Text.StringBuilder(512);
            int size = PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), 512, newVal);
            if ((size < 0))
            {
                PInvoke.ThrowError(this._handle, size);
            }
            else
            {
                if ((size > 0))
                {
                    newVal.Capacity = size;
                    PInvoke.TestForError(this._handle, PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), size, newVal));
                }
            }
            return newVal.ToString();
        }

        public string GetString(agn934xniProperties propertyId)
        {
            return this.GetString(propertyId, "");
        }

        public bool GetBoolean(agn934xniProperties propertyId, string repeatedCapabilityOrChannel)
        {
            ushort val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return System.Convert.ToBoolean(val);
        }

        public bool GetBoolean(agn934xniProperties propertyId)
        {
            return this.GetBoolean(propertyId, "");
        }

        public void SetInt32(agn934xniProperties propertyId, string repeatedCapabilityOrChannel, int val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetInt32(agn934xniProperties propertyId, int val)
        {
            this.SetInt32(propertyId, "", val);
        }

        public void SetDouble(agn934xniProperties propertyId, string repeatedCapabilityOrChannel, double val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetDouble(agn934xniProperties propertyId, double val)
        {
            this.SetDouble(propertyId, "", val);
        }

        public void SetString(agn934xniProperties propertyId, string repeatedCapabilityOrChannel, string val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetString(agn934xniProperties propertyId, string val)
        {
            this.SetString(propertyId, "", val);
        }

        public void SetBoolean(agn934xniProperties propertyId, string repeatedCapabilityOrChannel, bool val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), System.Convert.ToUInt16(val)));
        }

        public void SetBoolean(agn934xniProperties propertyId, bool val)
        {
            this.SetBoolean(propertyId, "", val);
        }

        private class PInvoke
        {

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_InitWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitWithOptions(string Resource_Name, ushort ID_Query, ushort Reset_Device, string Option_String, out System.IntPtr Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureMeasurementType", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMeasurementType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Instrument_Mode, int Measurement_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureAverage", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAverage(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Average_Enable, int Average_Count, int Average_Type, ushort Average_Duration_Enable, double Average_Duration);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureAcquisition", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAcquisition(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Sweep_Mode_Continuous, int Number_Of_Sweeps, ushort Detector_Type_Auto, int Detector_Type, int Vertical_Scale);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureFrequencyCenterSpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFrequencyCenterSpan(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Center_Frequency, double Span);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureFrequencySpanMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFrequencySpanMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Frequency_Span_Mode);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureFrequencyOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFrequencyOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Frequency_Offset);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureFrequencyStartStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFrequencyStartStop(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Start_Frequency, double Stop_Frequency);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureGatedSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGatedSweep(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Gated_Sweep, int Gate_Source, double Gate_Delay, double Gate_Length);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureGatedSweepView", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGatedSweepView(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Gate_View, double Gate_View_Sweep_Time);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureHighSensitivityEnable", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureHighSensitivityEnable(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort High_Sensitive_Function_Enable);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Amplitude_Units, double Input_Impedance, double Reference_Level, double Reference_Level_Offset, ushort Attenuation_Auto, double Attenuation);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureSweepCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSweepCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Resolution_Bandwidth_Auto, double Resolution_Bandwidth, ushort Video_Bandwidth_Auto, double Video_Bandwidth, ushort Sweep_Time_Auto, double Sweep_Time);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureVBWRBWRatio", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureVBWRBWRatio(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Ratio_Auto, double Ratio);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureACPR", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureACPR(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Center_Frequency, double Main_Intergration_Bandwidth);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureACPRFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureACPRFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_RRC_Filter, double RRC_Filter_Alpha_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureCHP", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCHP(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Center_Frequency, double Integration_Bandwidth, double Channel_Span, ushort Auto_Range, double Bottom_Range, double Top_Range);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureCHPFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCHPFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_CHP_Filter, double RRC_Filter_Alpha_Value, double RRC_Filter_Bandwidth);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureDemodulationTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDemodulationTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Type, ushort Enable_Trigger_Delay, double Trigger_Delay, double RF_Trigger_Level, int Trigger_Slope);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureDemodulationFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDemodulationFilter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Filter, int Reference_Filter, int Filter_Symbols, double Alpha_Bbt);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureDemodulationDisplay", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDemodulationDisplay(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Axis, ushort Enable_Scale_Coupling, double Scale_Per_Division, double Reference_Value, int Reference_Position, int View_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureDemodulationLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDemodulationLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Limit, double Carrier_Power_Upper_Limit, double Depth_Freq_Deviation_Up_Limit, double Depth_Freq_Deviation_Low_Limit, double Carrier_Frequency_Offset_Upper_);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureAMFMMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAMFMMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Average, int Average_Count, int Detector_Type, ushort Enable_Detector_Peak_Hold, ushort Auto_IF_Bandwidth, double IF_Bandwidth, int Equal_Low_Pass_Filter);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureASKFSKMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureASKFSKMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Average, int Average_Count, double Symbol_Rate, int Measurement_Length);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureExternalGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureExternalGain(System.Runtime.InteropServices.HandleRef Instrument_Handle, double External_Gain);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_EnableDemodulationPreamplifier", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableDemodulationPreamplifier(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Preamplifier);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureDemodulationMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDemodulationMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Demodulation_Mode);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureCarrierFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCarrierFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Auto_Carrier_Frequency, double Carrier_Frequency, double Carrier_Frequency_Step);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_RestartMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int RestartMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureOBW", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOBW(System.Runtime.InteropServices.HandleRef Instrument_Handle, int O_BWMethod, double OBW_Power_Percentage, double O_BWPower_Level);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerMeterTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerMeterTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Type, int Trigger_Source, ushort Auto_Trigger_Level, double Trigger_Level, int Trigger_Slope);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerMeterTriggerTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerMeterTriggerTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Trigger_Delay_Time, double Trigger_Holdoff_Time, double Trigger_Hysteresis_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerMeterLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerMeterLimit(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Limit, double Upper_Limit, double Lower_Limit, ushort Enable_Limit_Beep);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerMeterPeakTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerMeterPeakTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Trace_X_Start_Time, double Trace_X_Scale_Time, double Trace_Y_Max_Value, double Trace_Y_Scale_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerMeterPeakGate", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerMeterPeakGate(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Gate_Start_Time, double Gate_Length_Time);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerMeterAdvanced", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerMeterAdvanced(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Measurement_Interval_Time, int Video_Bandwidth_Type, ushort Auto_Video_Average_Count, int Video_Average_Count);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerMeterAverage", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerMeterAverage(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Average, ushort Auto_Average_Count, int Average_Count_Number, ushort Enable_Average_Step_Detect);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerMeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerMeter(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Auto_Power_Range, int Power_Range, double Center_Frequency, ushort Enable_Reference_Power, double Reference_Power_Value, ushort Enable_Offset, double Offset_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerMeterSweepState", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerMeterSweepState(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Sweep_State);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigurePowerSensorZeroingType", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerSensorZeroingType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Zeroing_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_StartPowerSensorZeroing", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartPowerSensorZeroing(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_EnableMarkerContinuousValley", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableMarkerContinuousValley(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Continuous_Valley);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureReflectionMeasurementTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureReflectionMeasurementTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Display_Type, int Math_Type, ushort Enable_Average_Number, int Average_Number);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureReflectionMeasurementAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureReflectionMeasurementAmplitude(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Auto_Scale, double Reference_Level, double Scale_Per_Division);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureReflectionMeasurementDistance", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureReflectionMeasurementDistance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Distance_Unit, double Start_Distance_Point, double Stop_Distance_Point);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureReflectionMeasurementFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureReflectionMeasurementFrequency(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Setting_Mode, double Start_Frequency, double Stop_Frequency, double Center_Frequency, double Frequency_Span);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureReflectionMeasurementCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureReflectionMeasurementCalibration(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Calibration_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureReflectionMeasurementDispalyType", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureReflectionMeasurementDispalyType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Display_Type, ushort Enable_DTF_Frequency_Domain);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureReflectionMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureReflectionMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Type, ushort Enable_IIM);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_StartMarkerValleySearch", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartMarkerValleySearch(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_StartMarkerPeakSearch", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartMarkerPeakSearch(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SaveTraceData", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveTraceData(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_EnableReflectionMeasurementIIM", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableReflectionMeasurementIIM(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_IIM);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureReflectionMeasurementCable", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureReflectionMeasurementCable(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Cable_Type, string Cable_Name, double Cable_Attenuation, double Cable_Velocity_Factor);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureSEMAverage", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSEMAverage(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Average_Enable, int Average_Number);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureSEMRefChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSEMRefChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Channel_Integrate_Bandwidth, double Center_Frequency, double Channel_Span, ushort Auto_Total_Power_Reference, double Total_Power_Reference, ushort Auto_Resolution_Bandwidth, double Resolution_Bandwidth);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureSEMFailSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSEMFailSettings(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Log, ushort Enable_Hold, ushort Enable_Beep);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureSEMMeasurementType", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSEMMeasurementType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Measurement_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureSEMOffsetMask", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSEMOffsetMask(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Offset_A_Mask_Type, int Offset_B_Mask_Type, int Offset_C_Mask_Type, int Offset_D_Mask_Type, int Offset_E_Mask_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureSEMOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSEMOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Characteristic_Type, double Offset_A_Value, double Offset_B_Value, double Offset_C_Value, double Offset_D_Value, double Offset_E_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureAutoSEMOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAutoSEMOffset(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Characteristic_Type, ushort Auto_Offset_A, ushort Auto_Offset_B, ushort Auto_Offset_C, ushort Auto_Offset_E, ushort Auto_Offset_D);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureNormalize", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureNormalize(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Normalize_Enable, double Normalize_Reference_Level, int Normalize_Reference_Position);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureTrackingGenerator", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTrackingGenerator(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Output_Enabled, double Output_Power, double Output_Power_Step, double Output_Power_Offset);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureDemodulation", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDemodulation(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Demodulation_Function, double Speaker_Volume, double Delay_Time);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureMarkerEnabled", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMarkerEnabled(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Marker_Enabled, string Marker_Trace_Name);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureMarkerFrequencyCounter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMarkerFrequencyCounter(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enabled, double Resolution);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureMarkerPeakSearch", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMarkerPeakSearch(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Marker_Continuous_Peaking_Enabl, int Peak_Search_Mode);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureMarkerSearch", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMarkerSearch(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Peak_Excursion, double Marker_Threshold);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureMarkerType", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMarkerType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Marker_Type, int Marker_Function);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureSignalTrackEnabled", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSignalTrackEnabled(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Signal_Track_Enabled);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_DisableAllMarkers", CallingConvention = CallingConvention.StdCall)]
            public static extern int DisableAllMarkers(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetMarkerName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerName(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Index, int Name_Buffer_Size, System.Text.StringBuilder Name);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_MoveMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int MoveMarker(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Marker_Position);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_MarkerSearch", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerSearch(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Search_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SetActiveMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetActiveMarker(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Active_Marker);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SetInstrumentFromMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetInstrumentFromMarker(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Instrument_Setting);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_QueryMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryMarker(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Marker_Position, out double Marker_Amplitude);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_QueryMarkerType", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryMarkerType(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Marker_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureLimitLine", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureLimitLine(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Limit_Line, ushort Enabled, int Type, int X_Value, double Y_Value, int Limit_Mode);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureLimitsValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureLimitsValues(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Limit_Line, int Limit_Value_Number, double[] X_Axis_Values, double[] Amplitudes, ushort[] Is_Connected_Flags);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureLimitsMargin", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureLimitsMargin(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Limit_Line, ushort Enable_Limits_Margin, double Limits_Margin_Value, ushort Enable_Threshold, double Threshold_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_DeleteLimitsData", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteLimitsData(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Limit_Line, int Operation);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_EnableLimitBeep", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableLimitBeep(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Limit_Beep);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Source);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureTriggerDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerDelay(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Trigger_Delay_Time_Enable, double Trigger_Delay_Time);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureExternalTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureExternalTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, double External_Trigger_Level, int External_Trigger_Slope);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureVideoTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureVideoTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Video_Trigger_Level, int Video_Trigger_Slope);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_AddTraces", CallingConvention = CallingConvention.StdCall)]
            public static extern int AddTraces(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Destination_Trace, string Trace1, string Trace2);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_CopyTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int CopyTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Destination_Trace, string Source_Trace);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ExchangeTraces", CallingConvention = CallingConvention.StdCall)]
            public static extern int ExchangeTraces(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trace1, string Trace2);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SubtractTraces", CallingConvention = CallingConvention.StdCall)]
            public static extern int SubtractTraces(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Destination_Trace, string Trace1, string Trace2);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_RestartTraceAverage", CallingConvention = CallingConvention.StdCall)]
            public static extern int RestartTraceAverage(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_QueryTraceSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryTraceSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trace_Name, out int Trace_Size);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureTraceType", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTraceType(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trace_Name, int Trace_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ConfigureTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Trace_Math_Function_Enable, int Trace_Math_Type);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetTraceName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceName(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Index, int Name_Buffer_Size, System.Text.StringBuilder Name);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SetActiveTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetActiveTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Active_Trace);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadAMMeasurementData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadAMMeasurementData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, int Array_Length, [In, Out] double[] Carrier_Power, [In, Out] double[] Modulation_Rate, [In, Out] double[] Am_Depth, [In, Out] double[] Sinad, [In, Out] double[] THD, [In, Out] double[] Carrier_Freq_Offset);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadFMMeasurementData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadFMMeasurementData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, int Array_Length, [In, Out] double[] Carrier_Power, [In, Out] double[] Modulation_Rate, [In, Out] double[] Frequency_Deviation, [In, Out] double[] Sinad, [In, Out] double[] THD, [In, Out] double[] Carrier_Freq_Offset);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadASKMeasurementData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadASKMeasurementData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, int Array_Length, [In, Out] double[] Carrier_Power, [In, Out] double[] Ask_Depth, [In, Out] double[] Ask_Error, [In, Out] double[] Ask_Index, [In, Out] double[] Carrier_Freq_Offset);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadFSKMeasurementData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadFSKMeasurementData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, int Array_Length, [In, Out] double[] Carrier_Power, [In, Out] double[] Deviation, [In, Out] double[] Fsk_Error, [In, Out] double[] Mag_Error, [In, Out] double[] Carrier_Freq_Offset);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadModulationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadModulationData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, out double Depth, out double Carrier_Power, out double Modulation_Rate, out double Frequency_Deviation);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadMeasurementTraceData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMeasurementTraceData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, [In, Out] double[] Measurement_Trace_Result_Array, int Array_Size, out int Actual_Returned_Data_Number);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadLimitTestResult", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadLimitTestResult(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Limit_Failure_Count);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadCurrentLimitsResult", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadCurrentLimitsResult(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Limit_Line, out int Limit_Result);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadReferenceMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadReferenceMarker(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double X_Axis_Value, out double Y_Axis_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadReflectionMeasurementTraceData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadReflectionMeasurementTraceData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, int Data_Type, [In, Out] double[] Result_Array, int Result_Array_Length, out int Actual_Number);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadSEMData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadSEMData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, int Data_Type, out double Offset_A_Value, out double Offset_B_Value, out double Offset_C_Value, out double Offset_D_Value, out double Offset_E_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadSEMFailFlag", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadSEMFailFlag(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, int Flag_Type, out ushort Offset_A_Result, out ushort Offset_B_Result, out ushort Offset_C_Result, out ushort Offset_D_Result, out ushort Offset_E_Result);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadSEMYMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadSEMYMarker(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Y_Marker);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadYTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadYTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trace_Name, int Max_Time_Milliseconds, int Array_Length, out int Actual_Points, [In, Out] double[] Amplitude);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadMeasurementACPR", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMeasurementACPR(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, out double Low_ACP, out double Low_ACPR, out double Upper_ACP, out double Upper_ACPR, out double Main_Channel_Power);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadMeasurementCHP", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMeasurementCHP(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, out double Main_Channel_Power, out double Power_Density);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadMeasurementOBW", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMeasurementOBW(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Max_Time, out double Occupied_Bandwidth, out double Bandwidth_Centroid, out double X_Db_Bandwidth);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_Abort", CallingConvention = CallingConvention.StdCall)]
            public static extern int Abort(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_AcquisitionStatus", CallingConvention = CallingConvention.StdCall)]
            public static extern int AcquisitionStatus(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Status);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_Initiate", CallingConvention = CallingConvention.StdCall)]
            public static extern int Initiate(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_FetchYTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchYTrace(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trace_Name, int Array_Length, out int Actual_Points, [In, Out] double[] Amplitude);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_FetchMeasurementACPR", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchMeasurementACPR(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Low_ACP, out double Low_ACPR, out double Upper_ACP, out double Upper_ACPR, out double Main_Channel_Power);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_FetchMeasurementCHP", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchMeasurementCHP(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Main_Channel_Power, out double Power_Density);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_FetchMeasurementOBW", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchMeasurementOBW(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Occupied_Bandwidth, out double Bandwidth_Centroid, out double X_Db_Bandwidth);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ResetWithDefaults", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetWithDefaults(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_Disable", CallingConvention = CallingConvention.StdCall)]
            public static extern int Disable(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.Runtime.InteropServices.HandleRef Instrument_Handle, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_error_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Error_Code, System.Text.StringBuilder Error_Message);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_InvalidateAllAttributes", CallingConvention = CallingConvention.StdCall)]
            public static extern int InvalidateAllAttributes(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetNextCoercionRecord", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextCoercionRecord(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Coercion_Record);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetNextInterchangeWarning", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextInterchangeWarning(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Interchange_Warning);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ClearInterchangeWarnings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearInterchangeWarnings(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ResetInterchangeCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetInterchangeCheck(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_WriteInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteInstrData(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Write_Buffer);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_ReadInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadInstrData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number_of_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int Num_Bytes_Read);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_error_message", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_message(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Error_Code, System.Text.StringBuilder Error_Message_2);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViInt32(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, out int Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViReal64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, out double Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViString(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, int Buffer_Size, System.Text.StringBuilder Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViBoolean(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, out ushort Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViSession(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, out System.Runtime.InteropServices.HandleRef Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViInt32(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, int Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViReal64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, double Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViString(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, string Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViBoolean(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, ushort Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_SetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViSession(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Repeated_Capability_Name, int Attribute_ID, System.Runtime.InteropServices.HandleRef Attribute_Value);

            [DllImport("agn934xni_32.dll", EntryPoint = "agn934xni_GetError", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetError(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Code, int BufferSize, System.Text.StringBuilder Description);


            public static int TestForError(System.Runtime.InteropServices.HandleRef handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.Runtime.InteropServices.HandleRef handle, int code)
            {
                int status;
                int size = PInvoke.GetError(handle, out status, 0, null);
                System.Text.StringBuilder msg = new System.Text.StringBuilder();
                if ((size >= 0))
                {
                    msg.Capacity = size;
                    PInvoke.GetError(handle, out status, size, msg);
                }
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class agn934xniConstants
    {

        public const int InstrumentModeSpectrumAnalyzer = 1;

        public const int InstrumentModeTrackingGenerator = 2;

        public const int InstrumentModePowermeter = 3;

        public const int InstrumentModeDemodulation = 4;

        public const int InstrumentModeReflectionMeasurement = 5;

        public const int MeasurementTypeOff = 1;

        public const int MeasurementTypeChp = 2;

        public const int MeasurementTypeAcpr = 3;

        public const int MeasurementTypeObw = 4;

        public const int MeasurementTypeSm = 5;

        public const int MeasurementTypeSem = 6;

        public const int AverageTypeLogpower = 1;

        public const int AverageTypePower = 2;

        public const int AverageTypeVoltage = 3;

        public const int DetectorTypeAverage = 2;

        public const int DetectorTypeMaxPeak = 3;

        public const int DetectorTypeMinPeak = 4;

        public const int DetectorTypeSample = 5;

        public const int DetectorTypeNormal = 6;

        public const int VerticalScaleLinear = 1;

        public const int VerticalScaleLogarithmic = 2;

        public const int FrequencySpanModeFull = 1;

        public const int FrequencySpanModeZero = 2;

        public const int FrequencySpanModePrevious = 3;

        public const int GateSourceExternal = 1;

        public const int GateSourcePeriodicTimer = 2;

        public const int GateSourceRfBurst = 3;

        public const int AmplitudeUnitsDbm = 1;

        public const int AmplitudeUnitsDbmv = 2;

        public const int AmplitudeUnitsDbuv = 3;

        public const int AmplitudeUnitsVolt = 4;

        public const int AmplitudeUnitsWatt = 5;

        public const int AmplitudeUnitsDbmvemf = 1001;

        public const int AmplitudeUnitsDbuvemf = 1002;

        public const int AmplitudeUnitsVemf = 1003;

        public const double InputImpedance50Ohm = 50D;

        public const double InputImpedance75Ohm = 75D;

        public const int DemodulationTriggerTypeImmediate = 1;

        public const int DemodulationTriggerTypeExternal = 2;

        public const int DemodulationTriggerTypeRftrigger = 3;

        public const int DemodulationExternalTriggerTypePositive = 1;

        public const int DemodulationExternalTriggerTypeNegative = 2;

        public const int DemodulationFilterOff = 1;

        public const int DemodulationFilterRnyquist = 2;

        public const int DemodulationFilterNyquist = 3;

        public const int DemodulationFilterGaussian = 4;

        public const int DemodulationAxisX = 1;

        public const int DemodulationAxisY = 2;

        public const int DemodulationXScaleReferencePositionLeft = 1;

        public const int DemodulationXScaleReferencePositionCenter = 2;

        public const int DemodulationXScaleReferencePositionRight = 3;

        public const int DemodulationYScaleReferencePositionTop = 1;

        public const int DemodulationYScaleReferencePositionCenter = 2;

        public const int DemodulationYScaleReferencePositionBottom = 3;

        public const int DemodulationViewTypeWaveform = 1;

        public const int DemodulationViewTypeSymbol = 2;

        public const int DemodulationViewTypeEye = 3;

        public const int DemodulationViewTypeError = 4;

        public const int DemodulationDetectorTypePositivePeak = 1;

        public const int DemodulationDetectorTypeNegativePeak = 2;

        public const int DemodulationDetectorTypeAveragePeak = 3;

        public const int DemodulationDetectorTypeRms = 4;

        public const int EqualLowPassFilterAuto = 1;

        public const int EqualLowPassFilterOff = 2;

        public const int EqualLowPassFilterIfbw6 = 3;

        public const int EqualLowPassFilterIfbw20 = 4;

        public const int EqualLowPassFilterIfbw60 = 5;

        public const int EqualLowPassFilterIfbw200 = 6;

        public const int EqualLowPassFilterIfbw600 = 7;

        public const int EqualLowPassFilterIfbw2000 = 8;

        public const int DemodulationModeAm = 1;

        public const int DemodulationModeFm = 2;

        public const int DemodulationModeAsk = 3;

        public const int DemodulationModeFsk = 4;

        public const int ObwMethodPercent = 1;

        public const int ObwMethodDbc = 2;

        public const int PowerMeterTriggerTypeFreerun = 1;

        public const int PowerMeterTriggerTypeContinuous = 2;

        public const int PowerMeterTriggerTypeSingle = 3;

        public const int PowerMeterTriggerSourceExternal = 1;

        public const int PowerMeterTriggerSourceInternal = 2;

        public const int PowerMeterTriggerSlopeNegative = 1;

        public const int PowerMeterTriggerSlopePositive = 2;

        public const int PowerMeterVideoBandwidthTypeHigh = 1;

        public const int PowerMeterVideoBandwidthTypeMedium = 2;

        public const int PowerMeterVideoBandwidthTypeLow = 3;

        public const int PowerMeterVideoBandwidthTypeOff = 4;

        public const int PowerMeterPowerRangeUpper = 1;

        public const int PowerMeterPowerRangeLower = 2;

        public const int PowerMeterSweepStateRun = 1;

        public const int PowerMeterSweepStatePause = 2;

        public const int ZeroingTypeExternal = 1;

        public const int ZeroingTypeInternal = 2;

        public const int ReflectionMeasurementTraceTypeData = 1;

        public const int ReflectionMeasurementTraceTypeMem = 2;

        public const int ReflectionMeasurementTraceTypeBoth = 3;

        public const int ReflectionMeasurementTraceMathTypeOff = 1;

        public const int ReflectionMeasurementTraceMathTypeAdd = 2;

        public const int ReflectionMeasurementTraceMathTypeSub = 3;

        public const int ReflectionMeasurementTraceMathTypeDiv = 4;

        public const int ReflectionMeasurementDistanceUnitMeters = 1;

        public const int ReflectionMeasurementDistanceUnitFeet = 2;

        public const int FrequencySettingModeStartStop = 1;

        public const int FrequencySettingModeCenterSpan = 2;

        public const int ReflectionMeasurementCalibrationTypeFull = 1;

        public const int ReflectionMeasurementCalibrationTypeSelected = 2;

        public const int ReflectionMeasurementDisplayTypeRl = 1;

        public const int ReflectionMeasurementDisplayTypeVswr = 2;

        public const int ReflectionMeasurementDisplayTypeLin = 3;

        public const int ReflectionMeasurementTypeReflectionOnePortInsertionLoss = 1;

        public const int ReflectionMeasurementTypeReflection = 2;

        public const int ReflectionMeasurementTypeDistanceToFault = 3;

        public const int ReflectionMeasurementCableTypeS1000 = 1;

        public const int ReflectionMeasurementCableTypeS2000 = 2;

        public const int ReflectionMeasurementCableTypeS2500 = 3;

        public const int ReflectionMeasurementCableTypeCustom = 4;

        public const int SemMeasurementTypeTotalPowerReference = 1;

        public const int SemMeasurementTypePsdReference = 2;

        public const int SemOffsetMaskAbsolute = 1;

        public const int SemOffsetMaskRelative = 2;

        public const int SemOffsetMaskBoth = 3;

        public const int SemOffsetMaskEither = 4;

        public const int SemOffsetChannelCharacteristicStartFrequency = 1;

        public const int SemOffsetChannelCharacteristicStopFrequency = 2;

        public const int SemOffsetChannelCharacteristicSweepTime = 3;

        public const int SemOffsetChannelCharacteristicResolutionBw = 4;

        public const int SemOffsetChannelCharacteristicMeasurementBw = 5;

        public const int SemOffsetChannelCharacteristicAbsStartampt = 6;

        public const int SemOffsetChannelCharacteristicAbsStopampt = 7;

        public const int SemOffsetChannelCharacteristicRelativeStartampt = 8;

        public const int SemOffsetChannelCharacteristicRelativeStopampt = 9;

        public const int MarkerDemodulationFunctionAm = 1;

        public const int MarkerDemodulationFunctionFm = 2;

        public const int PeakSearchModeMaximum = 1;

        public const int PeakSearchModeMinimum = 2;

        public const int MarkerTypeNormal = 1;

        public const int MarkerTypeDelta = 2;

        public const int MarkerTypeOff = 1001;

        public const int MarkerFunctionFcount = 1;

        public const int MarkerFunctionNoise = 2;

        public const int MarkerFunctionOff = 3;

        public const int MarkerSearchHighest = 1;

        public const int MarkerSearchNextPeakLeft = 2;

        public const int MarkerSearchNextPeakRight = 3;

        public const int MarkerSearchNextPeak = 4;

        public const int InstrumentSettingFrequencyCenter = 1;

        public const int InstrumentSettingFrequencyStart = 2;

        public const int InstrumentSettingFrequencyStop = 3;

        public const int LimitLineUpper = 1;

        public const int LimitLineLower = 2;

        public const int LimitLineFrequency = 1;

        public const int LimitLineTime = 2;

        public const int LimitLineFixed = 1;

        public const int LimitLineRelative = 2;

        public const int LimitValueDeleteLast = 1;

        public const int LimitValueDeleteAll = 2;

        public const int TriggerSourceExternal = 1;

        public const int TriggerSourceImmediate = 2;

        public const int TriggerSourceVideo = 5;

        public const int ExternalTriggerSlopePositive = 1;

        public const int ExternalTriggerSlopeNegative = 2;

        public const int VideoTriggerSlopePositive = 1;

        public const int VideoTriggerSlopeNegative = 2;

        public const int TraceTypeClearWrite = 1;

        public const int TraceTypeMaxHold = 2;

        public const int TraceTypeMinHold = 3;

        public const int TraceTypeView = 5;

        public const int TraceTypeStore = 6;

        public const int TraceMathTypeLogPower = 1;

        public const int TraceMathTypePower = 2;

        public const int SemOffsetDataLowerPower = 1;

        public const int SemOffsetDataUpperPower = 2;

        public const int SemOffsetDataLowerPeakFrequency = 3;

        public const int SemOffsetDataUpperPeakFrequency = 4;

        public const int SemOffsetFailFlagLower = 1;

        public const int SemOffsetFailFlagUpper = 2;

        public const int ModelN9342c = 1;

        public const int ModelN9343c = 2;

        public const int ModelN9344c = 3;

        public const int ModelN9322c = 4;

        public const int SweepModeNormal = 1;

        public const int SweepModeFast = 2;

        public const int SweepModeAuto = 3;

        public const int MarkerXReadoutFrequency = 1;

        public const int MarkerXReadoutTime = 2;

        public const int MarkerXReadoutPeriod = 3;

        public const double _1 = 1D;

        public const double _2 = 2D;

        public const double _5 = 5D;

        public const double _10 = 10D;

        public const double _60000 = 60000D;

        public const double _96000 = 96000D;

        public const double _120000 = 120000D;

        public const double _240000 = 240000D;

        public const double _300000 = 300000D;

        public const double _480000 = 480000D;

        public const double _600000 = 600000D;

        public const double _960000 = 960000D;

        public const double _1200000 = 1200000D;

        public const int DemodulationModeNone = 5;

        public const int ReflectionMeasurementWindowOff = 1;

        public const int ReflectionMeasurementWindowRectangular = 2;

        public const int ReflectionMeasurementWindowHamming = 3;

        public const int ReflectionMeasurementWindow3SampleBlackman = 4;

        public const int ReflectionMeasurementWindow4SampleBlackman = 5;
    }

    public enum agn934xniProperties
    {

        /// <summary>
        /// System.Boolean
        /// </summary>
        RangeCheck = 1050002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        QueryInstrumentStatus = 1050003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Cache = 1050004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Simulate = 1050005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RecordCoercions = 1050006,

        /// <summary>
        /// System.Boolean
        /// </summary>
        InterchangeCheck = 1050021,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverDescription = 1050514,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverPrefix = 1050302,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverVendor = 1050513,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverRevision = 1050551,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMajorVersion = 1050515,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMinorVersion = 1050516,

        /// <summary>
        /// System.String
        /// </summary>
        SupportedInstrumentModels = 1050327,

        /// <summary>
        /// System.String
        /// </summary>
        GroupCapabilities = 1050401,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentManufacturer = 1050511,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentModel = 1050512,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentFirmwareRevision = 1050510,

        /// <summary>
        /// System.String
        /// </summary>
        LogicalName = 1050305,

        /// <summary>
        /// System.String
        /// </summary>
        IoResourceDescriptor = 1050304,

        /// <summary>
        /// System.String
        /// </summary>
        DriverSetup = 1050007,

        /// <summary>
        /// System.String
        /// </summary>
        IdQueryResponse = 1150001,

        /// <summary>
        /// System.Int32
        /// </summary>
        SweepMode = 1151015,

        /// <summary>
        /// System.Boolean
        /// </summary>
        VideoBandwidthAuto = 1250023,

        /// <summary>
        /// System.Double
        /// </summary>
        VideoBandwidth = 1250022,

        /// <summary>
        /// System.Int32
        /// </summary>
        VerticalScale = 1250021,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SweepTimeAuto = 1250017,

        /// <summary>
        /// System.Double
        /// </summary>
        SweepTime = 1250016,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SweepModeContinuous = 1250015,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ResolutionBandwidthAuto = 1250014,

        /// <summary>
        /// System.Double
        /// </summary>
        ResolutionBandwidth = 1250013,

        /// <summary>
        /// System.Double
        /// </summary>
        ReferenceLevelOffset = 1250012,

        /// <summary>
        /// System.Double
        /// </summary>
        ReferenceLevel = 1250011,

        /// <summary>
        /// System.Int32
        /// </summary>
        NumberOfSweeps = 1250010,

        /// <summary>
        /// System.Int32
        /// </summary>
        FrequencySpanMode = 1151016,

        /// <summary>
        /// System.Double
        /// </summary>
        FrequencySpan = 1151014,

        /// <summary>
        /// System.Double
        /// </summary>
        CenterFrequency = 1151013,

        /// <summary>
        /// System.Double
        /// </summary>
        InputImpedance = 1250009,

        /// <summary>
        /// System.Double
        /// </summary>
        FrequencyOffset = 1250008,

        /// <summary>
        /// System.Double
        /// </summary>
        FrequencyStop = 1250007,

        /// <summary>
        /// System.Double
        /// </summary>
        FrequencyStart = 1250006,

        /// <summary>
        /// System.Boolean
        /// </summary>
        DetectorTypeAuto = 1250005,

        /// <summary>
        /// System.Int32
        /// </summary>
        DetectorType = 1250004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AttenuationAuto = 1250003,

        /// <summary>
        /// System.Double
        /// </summary>
        Attenuation = 1250002,

        /// <summary>
        /// System.Int32
        /// </summary>
        AmplitudeUnits = 1250001,

        /// <summary>
        /// System.Int32
        /// </summary>
        InstrumentMode = 1151012,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasurementType = 1151011,

        /// <summary>
        /// System.Int32
        /// </summary>
        AverageCount = 1151010,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AverageEnable = 1151009,

        /// <summary>
        /// System.Int32
        /// </summary>
        AverageType = 1151008,

        /// <summary>
        /// System.Double
        /// </summary>
        AverageDuration = 1151007,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AverageDurationEnable = 1151006,

        /// <summary>
        /// System.Double
        /// </summary>
        VbwRbwRatio = 1151005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        VbwRbwRatioAuto = 1151004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        HighSensitivityEnable = 1151003,

        /// <summary>
        /// System.Int32
        /// </summary>
        GateSource = 1168001,

        /// <summary>
        /// System.Double
        /// </summary>
        GateLength = 1168002,

        /// <summary>
        /// System.Double
        /// </summary>
        GateDelay = 1168003,

        /// <summary>
        /// System.Double
        /// </summary>
        GateViewSweepTime = 1168004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        GateViewEnable = 1168005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        GatedSweepEnable = 1168006,

        /// <summary>
        /// System.Int32
        /// </summary>
        TraceSize = 1250019,

        /// <summary>
        /// System.Int32
        /// </summary>
        TraceType = 1250020,

        /// <summary>
        /// System.Int32
        /// </summary>
        TraceCount = 1250018,

        /// <summary>
        /// System.Int32
        /// </summary>
        TraceMathType = 1151002,

        /// <summary>
        /// System.String
        /// </summary>
        ActiveTrace = 1151001,

        /// <summary>
        /// System.Double
        /// </summary>
        TgOutputAmplitude = 1152007,

        /// <summary>
        /// System.Boolean
        /// </summary>
        TgOutputAmplitudeEnable = 1152006,

        /// <summary>
        /// System.Double
        /// </summary>
        TgOutputAmplitudeStep = 1152005,

        /// <summary>
        /// System.Double
        /// </summary>
        TgOutputAmplitudeOffset = 1152004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        TgNormalizeEnable = 1152003,

        /// <summary>
        /// System.Double
        /// </summary>
        TgNormalizeReferenceLevel = 1152002,

        /// <summary>
        /// System.Int32
        /// </summary>
        TgNormailizeReferencePosition = 1152001,

        /// <summary>
        /// System.Int32
        /// </summary>
        ObwMethod = 1153003,

        /// <summary>
        /// System.Double
        /// </summary>
        ObwPowerPercentage = 1153002,

        /// <summary>
        /// System.Double
        /// </summary>
        ObwPowerLevel = 1153001,

        /// <summary>
        /// System.Double
        /// </summary>
        ChpCenterFrequency = 1154006,

        /// <summary>
        /// System.Double
        /// </summary>
        ChpIntegrationBandwidth = 1154005,

        /// <summary>
        /// System.Double
        /// </summary>
        ChpChannelSpan = 1154004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ChpAutoRange = 1154003,

        /// <summary>
        /// System.Double
        /// </summary>
        ChpTopRange = 1154002,

        /// <summary>
        /// System.Double
        /// </summary>
        ChpBottomRange = 1154001,

        /// <summary>
        /// System.Double
        /// </summary>
        ChpRrcFilterBandwidth = 1154007,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ChpRrcFilterEnable = 1154008,

        /// <summary>
        /// System.Double
        /// </summary>
        ChpRrcFilterAlphaValue = 1154009,

        /// <summary>
        /// System.Double
        /// </summary>
        AcprCenterFrequency = 1155002,

        /// <summary>
        /// System.Double
        /// </summary>
        AcprMainChannelIntergrationBandwidth = 1155001,

        /// <summary>
        /// System.Double
        /// </summary>
        AcprRrcFilterAlphaValue = 1155003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AcprRrcFilterEnable = 1155004,

        /// <summary>
        /// System.Int32
        /// </summary>
        VideoTriggerSlope = 1250502,

        /// <summary>
        /// System.Double
        /// </summary>
        VideoTriggerLevel = 1250501,

        /// <summary>
        /// System.Int32
        /// </summary>
        ExternalTriggerSlope = 1250402,

        /// <summary>
        /// System.Double
        /// </summary>
        ExternalTriggerLevel = 1250401,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerSource = 1250301,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerDelayTime = 1157002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        TriggerDelayTimeEnable = 1157001,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SignalTrackEnabled = 1250211,

        /// <summary>
        /// System.Double
        /// </summary>
        PeakExcursion = 1250210,

        /// <summary>
        /// System.Int32
        /// </summary>
        PeakSearchType = 1156006,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerType = 1250701,

        /// <summary>
        /// System.String
        /// </summary>
        ActiveMarker = 1250201,

        /// <summary>
        /// System.String
        /// </summary>
        MarkerTrace = 1250209,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerThreshold = 1250208,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerPosition = 1250207,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerFrequencyCounterResolution = 1250206,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MarkerFrequencyCounterEnabled = 1250205,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MarkerEnabled = 1250204,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerCount = 1250203,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerAmplitude = 1250202,

        /// <summary>
        /// System.Boolean
        /// </summary>
        MarkerContinuousPeakingEnable = 1156010,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerPeakSearch = 1156009,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerInstrumentSetting = 1156008,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerFunction = 1156007,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerXReadout = 1156004,

        /// <summary>
        /// System.Int32
        /// </summary>
        MarkerDemodulationFunction = 1156003,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerDemodulationSpeakerVolume = 1156002,

        /// <summary>
        /// System.Double
        /// </summary>
        MarkerDemodulationDelayTime = 1156001,

        /// <summary>
        /// System.Int32
        /// </summary>
        LimitLineType = 1159005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        LimitLineEnabled = 1159004,

        /// <summary>
        /// System.Int32
        /// </summary>
        LimitLineMode = 1159003,

        /// <summary>
        /// System.Double
        /// </summary>
        LimitLineYValue = 1159002,

        /// <summary>
        /// System.Int32
        /// </summary>
        LimitLineXValue = 1159001,

        /// <summary>
        /// System.Double
        /// </summary>
        LimitLineThresholdValue = 1164001,

        /// <summary>
        /// System.Boolean
        /// </summary>
        LimitLineThresholdEnable = 1164002,

        /// <summary>
        /// System.Double
        /// </summary>
        LimitLineMarginValue = 1164003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        LimitLineMarginEnable = 1164004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        LimitLineBeepEnable = 1164006,

        /// <summary>
        /// System.Int32
        /// </summary>
        NumberOfDivisions = 1250602,

        /// <summary>
        /// System.Double
        /// </summary>
        UnitsPerDivision = 1250601,

        /// <summary>
        /// System.Double
        /// </summary>
        AmDemodulationYScaleDivision = 1161024,

        /// <summary>
        /// System.Double
        /// </summary>
        AmDemodulationYScaleReferenceValue = 1161020,

        /// <summary>
        /// System.Double
        /// </summary>
        AmDepthUpperLimit = 1161040,

        /// <summary>
        /// System.Double
        /// </summary>
        AmDepthLowerLimit = 1161042,

        /// <summary>
        /// System.Int32
        /// </summary>
        AmFmAverageCount = 1161055,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AmFmAverageEnable = 1161053,

        /// <summary>
        /// System.Double
        /// </summary>
        AmFmCarrierFrequencyOffsetUpperLimit = 1161035,

        /// <summary>
        /// System.Double
        /// </summary>
        AmFmCarrierPowerUpperLimit = 1161044,

        /// <summary>
        /// System.Int32
        /// </summary>
        AmFmDemodulationXScaleReferencePosition = 1161029,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AmFmDemodulationXScaleCouplingEnable = 1161027,

        /// <summary>
        /// System.Double
        /// </summary>
        AmFmDemodulationXScaleReferenceValue = 1161031,

        /// <summary>
        /// System.Double
        /// </summary>
        AmFmDemodulationXScaleDivision = 1161033,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AmFmDemodulationYScaleCouplingEnable = 1161015,

        /// <summary>
        /// System.Int32
        /// </summary>
        AmFmDemodulationYScaleReferencePosition = 1161017,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AmFmDetectorPeakHoldEnable = 1161051,

        /// <summary>
        /// System.Int32
        /// </summary>
        AmFmDetectorType = 1161052,

        /// <summary>
        /// System.Int32
        /// </summary>
        AmFmEqualLowPassFilter = 1161048,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AmFmIfBandwidthAuto = 1161049,

        /// <summary>
        /// System.Double
        /// </summary>
        AmFmIfBandwidth = 1161050,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AmFmLimitState = 1161046,

        /// <summary>
        /// System.Double
        /// </summary>
        FmDemodulationYScaleDivision = 1161025,

        /// <summary>
        /// System.Double
        /// </summary>
        FmDemodulationYScaleReferenceValue = 1161021,

        /// <summary>
        /// System.Double
        /// </summary>
        FmFrequencyDeviationLowerLimit = 1161036,

        /// <summary>
        /// System.Double
        /// </summary>
        FmFrequencyDeviationUpperLimit = 1161038,

        /// <summary>
        /// System.Double
        /// </summary>
        AskDemodulationYScaleDivision = 1161022,

        /// <summary>
        /// System.Double
        /// </summary>
        AskDemodulationYScaleReferenceValue = 1161018,

        /// <summary>
        /// System.Double
        /// </summary>
        AskDepthUpperLimit = 1161041,

        /// <summary>
        /// System.Double
        /// </summary>
        AskDepthLowerLimit = 1161043,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskAverageCount = 1161056,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AskFskAverageEnable = 1161054,

        /// <summary>
        /// System.Double
        /// </summary>
        AskFskCarrierFrequencyOffsetUpperLimit = 1161034,

        /// <summary>
        /// System.Double
        /// </summary>
        AskFskCarrierPowerUpperLimit = 1161045,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationExternalTriggerType = 1161004,

        /// <summary>
        /// System.Double
        /// </summary>
        AskFskDemodulationTriggerDelayTime = 1161003,

        /// <summary>
        /// System.Double
        /// </summary>
        AskFskDemodulationRfTriggerLevel = 1161005,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationTriggerType = 1161006,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationMeasurementLength = 1161007,

        /// <summary>
        /// System.Double
        /// </summary>
        AskFskDemodulationFilterAlphaBbt = 1161008,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationFilterSymbols = 1161009,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationReferenceFilter = 1161010,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationMeasurementFilter = 1161011,

        /// <summary>
        /// System.Double
        /// </summary>
        AskFskDemodulationSymbolRate = 1161012,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationViewType = 1161013,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AskFskDemodulationXScaleCouplingEnable = 1161026,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationXScaleDivision = 1161032,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationXScaleReferencePosition = 1161028,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationXScaleReferenceValue = 1161030,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AskFskDemodulationYScaleCouplingEnable = 1161014,

        /// <summary>
        /// System.Int32
        /// </summary>
        AskFskDemodulationYScaleReferencePosition = 1161016,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AskFskDemodulationTriggerDelayEnable = 1161002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AskFskLimitState = 1161047,

        /// <summary>
        /// System.Double
        /// </summary>
        FskDemodulationYScaleDivision = 1161023,

        /// <summary>
        /// System.Double
        /// </summary>
        FskDemodulationYScaleReferenceValue = 1161019,

        /// <summary>
        /// System.Double
        /// </summary>
        FskFrequencyDeviationLowerLimit = 1161037,

        /// <summary>
        /// System.Double
        /// </summary>
        FskFrequencyDeviationUpperLimit = 1161039,

        /// <summary>
        /// System.Int32
        /// </summary>
        DemodulationMode = 1161062,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PreamplifierEnable = 1161058,

        /// <summary>
        /// System.Boolean
        /// </summary>
        AutoCarrierFrequencyEnable = 1161059,

        /// <summary>
        /// System.Double
        /// </summary>
        CarrierFrequencyStep = 1161060,

        /// <summary>
        /// System.Double
        /// </summary>
        CarrierFrequency = 1161061,

        /// <summary>
        /// System.Double
        /// </summary>
        ExternalGain = 1161057,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SemAutoResolutionBandwidthEnable = 1162013,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SemAutoTotalPowerReferenceEnable = 1162011,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SemAverageEnable = 1162016,

        /// <summary>
        /// System.Int32
        /// </summary>
        SemAverageNumber = 1162017,

        /// <summary>
        /// System.Double
        /// </summary>
        SemCenterFrequency = 1162009,

        /// <summary>
        /// System.Double
        /// </summary>
        SemChannelIntegrateBandwidth = 1162015,

        /// <summary>
        /// System.Double
        /// </summary>
        SemChannelSpan = 1162010,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SemFailHoldEnable = 1162004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SemFailBeepEnable = 1162005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        SemFailLogEnable = 1162003,

        /// <summary>
        /// System.Int32
        /// </summary>
        SemMeasurementType = 1162006,

        /// <summary>
        /// System.Double
        /// </summary>
        SemResolutionBandwidth = 1162014,

        /// <summary>
        /// System.Double
        /// </summary>
        SemTotalPowerReference = 1162012,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterTriggerHysteresisValue = 1163001,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterTriggerHoldoffTime = 1163002,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerMeterTriggerSlope = 1163003,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterTriggerDelayTime = 1163004,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterTriggerLevel = 1163005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterAutoTriggerLevelEnable = 1163006,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerMeterTriggerSource = 1163007,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerMeterTriggerType = 1163008,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterLimitBeepEnable = 1163010,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterLimitLowerValue = 1163011,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterLimitUpperValue = 1163012,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterLimitEnable = 1163013,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterGateLengthTime = 1163014,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterGateStartTime = 1163015,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterTraceYScaleValue = 1163016,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterTraceYMaxValue = 1163017,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterTraceXScaleTime = 1163018,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterTraceXStartTime = 1163019,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerMeterVideoAverageCount = 1163020,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterAutoVideoAverageCountEnable = 1163021,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerMeterVideoBandwidthType = 1163022,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterMeasurementIntervalTime = 1163023,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterAverageStepDetectEnable = 1163024,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterAutoAverageCountEnable = 1163025,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerMeterAverageCountNumber = 1163026,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterAverageEnable = 1163027,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterOffsetValue = 1163028,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterOffsetEnable = 1163029,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterReferencePowerValue = 1163030,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterReferencePowerEnable = 1163031,

        /// <summary>
        /// System.Double
        /// </summary>
        PowerMeterCenterFrequency = 1163032,

        /// <summary>
        /// System.Boolean
        /// </summary>
        PowerMeterAutoPowerRangeEnable = 1163033,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerMeterPowerRange = 1163034,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerMeterSweepState = 1163035,

        /// <summary>
        /// System.Int32
        /// </summary>
        PowerMeterZeroingType = 1163036,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ReflectionMeasurementMarkerContinuousValleyEnable = 1165002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ReflectionMeasurementTraceAverageEnable = 1165004,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReflectionMeasurementTraceAverageNumber = 1165005,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReflectionMeasurementTraceMathType = 1165006,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReflectionMeasurementTraceDisplayType = 1165007,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementAmplitudeScalePerDivision = 1165008,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementAmplitudeScaleReferenceLevel = 1165009,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ReflectionMeasurementDtfFrequencyDomainEnable = 1165010,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReflectionMeasurementDistanceUnit = 1165011,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementDistanceStop = 1165012,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementDistanceStart = 1165013,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementFrequencySpan = 1165014,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementCenterFrequency = 1165015,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementStopFrequency = 1165016,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementStartFrequency = 1165017,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReflectionMeasurementWindow = 1165018,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementCableVelocityFactor = 1165019,

        /// <summary>
        /// System.Double
        /// </summary>
        ReflectionMeasurementCableAttenuation = 1165020,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReflectionMeasurementCableType = 1165021,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ReflectionMeasurementIimEnable = 1165022,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReflectionMeasurementCalibrationType = 1165023,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReflectionMeasurementType = 1165024,

        /// <summary>
        /// System.Int32
        /// </summary>
        ReflectionMeasurementDisplayType = 1165025,
    }
}
